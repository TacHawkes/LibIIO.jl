var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = LibIIO","category":"page"},{"location":"#LibIIO","page":"Home","title":"LibIIO","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for LibIIO.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [LibIIO]","category":"page"},{"location":"#LibIIO.Attr","page":"Home","title":"LibIIO.Attr","text":"Abstract super-type for all Attributes-like types\n\n\n\n\n\n","category":"type"},{"location":"#LibIIO.Buffer","page":"Home","title":"LibIIO.Buffer","text":"This class is used for all I/O operations of buffer capable devices.\n\n\n\n\n\n","category":"type"},{"location":"#LibIIO.Buffer-Union{Tuple{T}, Tuple{T, Any}, Tuple{T, Any, Bool}} where T<:LibIIO.AbstractDeviceOrTrigger","page":"Home","title":"LibIIO.Buffer","text":"Buffer(device::T, samples_count, cyclic::Bool = false) where {T <: AbstractDeviceOrTrigger}\n\nInitializes a new Buffer instance.\n\nParameters\n\ndevice::AbstractDeviceOrTrigger :  A device instance (either Device or Trigger to which the buffer belongs\nsamples_count : The size of the buffer in samples\ncyclic : If set to true, the buffer is circular\n\n\n\n\n\n","category":"method"},{"location":"#LibIIO.Channel","page":"Home","title":"LibIIO.Channel","text":"Channel{T <: AbstractDeviceOrTrigger} <: AbstractChannel\n\nRepresents a channel of an IIO device.\n\n\n\n\n\n","category":"type"},{"location":"#LibIIO.Channel-Tuple{LibIIO.AbstractDeviceOrTrigger, Ptr{iio_channel}}","page":"Home","title":"LibIIO.Channel","text":"Channel(dev::AbstractDeviceOrTrigger, channel::Ptr{iio_channel})\n\nInitializes a new instance of the Channel type.\n\nParameters\n\ndev::AbstractDeviceOrTrigger : The parent device handle (Device or Trigger)\nchannel::Ptr{iio_channel} :  A valid pointer to an IIO channel.\n\nReturns\n\nA new instance of this type\n\n\n\n\n\n","category":"method"},{"location":"#LibIIO.ChannelAttr","page":"Home","title":"LibIIO.ChannelAttr","text":"ChannelAttr <: Attr\n\nRepresents an attribute of a IIO channel\n\n\n\n\n\n","category":"type"},{"location":"#LibIIO.ChannelAttr-Tuple{Ptr{iio_channel}, String}","page":"Home","title":"LibIIO.ChannelAttr","text":"ChannelAttr(chn::Ptr{iio_channel}, name::String)\n\nInitializes a new instance of a ChannelAttr.\n\nParameters\n\nchn::Ptr{iio_channel} : A valid pointer to an iio_channel\nname::String : The channel attribute's name\n\nReturns\n\nA new instance of this type\n\n\n\n\n\n","category":"method"},{"location":"#LibIIO.Context","page":"Home","title":"LibIIO.Context","text":"Context(context = nothing)\n\nInitializes a new Context using the local or the network backend of the IIO library.\n\nThis function will create a network context if the IIOD_REMOTE environment variable is set to the hostname where the IIOD server runs. If set to an empty string, the server will be discovered using ZeroConf. If the environment variable is not set, a local context will be created instead.\n\n\n\n\n\n","category":"type"},{"location":"#LibIIO.Context-2","page":"Home","title":"LibIIO.Context","text":"Contains the representation of an IIO context.\n\n\n\n\n\n","category":"type"},{"location":"#LibIIO.Device","page":"Home","title":"LibIIO.Device","text":"Contains the representation of an IIO device.\n\n\n\n\n\n","category":"type"},{"location":"#LibIIO.Device-Tuple{LibIIO.AbstractContext, Ptr{iio_device}}","page":"Home","title":"LibIIO.Device","text":"Device(ctx::AbstractContext, device::Ptr{iio_device})\n\nInitializes a new Device instance.\n\nParameters\n\nctx : The IIO context instance with which the device is accessed\ndevice : A pointer to an iio_device which represents this device\n\n\n\n\n\n","category":"method"},{"location":"#LibIIO.DeviceAttr","page":"Home","title":"LibIIO.DeviceAttr","text":"DeviceAttr <: Attr\n\nRepresents an attribute of an IIO device\n\n\n\n\n\n","category":"type"},{"location":"#LibIIO.DeviceBufferAttr","page":"Home","title":"LibIIO.DeviceBufferAttr","text":"DeviceAttr <: Attr\n\nRepresents a buffer attribute of an IIO device\n\n\n\n\n\n","category":"type"},{"location":"#LibIIO.DeviceDebugAttr","page":"Home","title":"LibIIO.DeviceDebugAttr","text":"DeviceAttr <: Attr\n\nRepresents a debug attribute of an IIO device\n\n\n\n\n\n","category":"type"},{"location":"#LibIIO.LocalContext","page":"Home","title":"LibIIO.LocalContext","text":"Local IIO Context.\n\n\n\n\n\n","category":"type"},{"location":"#LibIIO.LocalContext-Tuple{}","page":"Home","title":"LibIIO.LocalContext","text":"LocalContext([ctx::Ptr{iio_context}])\n\nInitializes a new LocalContext using the local backend if the IIO library. Can be constructed from an existing pointer to an iio_context.\n\n\n\n\n\n","category":"method"},{"location":"#LibIIO.NetworkContext","page":"Home","title":"LibIIO.NetworkContext","text":"XMLContext(xml_file)\n\nInitializes a new NetworkContext using the network backend if the IIO library.\n\nParameters\n\nhostname : Hostname, IPv4 or IPv6 address where the IIO Daemon is running\n\n\n\n\n\n","category":"type"},{"location":"#LibIIO.NetworkContext-2","page":"Home","title":"LibIIO.NetworkContext","text":"Network IIO context\n\n\n\n\n\n","category":"type"},{"location":"#LibIIO.Trigger","page":"Home","title":"LibIIO.Trigger","text":"Contains the representation of an IIO device that can act as a trigger.\n\n\n\n\n\n","category":"type"},{"location":"#LibIIO.Trigger-Tuple{LibIIO.AbstractContext, Ptr{iio_device}}","page":"Home","title":"LibIIO.Trigger","text":"Trigger(ctx::AbstractContext, device::Ptr{iio_device})\n\nInitializes a new Trigger instance.\n\nParameters\n\nctx : The IIO context instance with which the device is accessed\ndevice : A pointer to an iio_device which represents this trigger\n\n\n\n\n\n","category":"method"},{"location":"#LibIIO.XMLContext","page":"Home","title":"LibIIO.XMLContext","text":"XML IIO Context.\n\n\n\n\n\n","category":"type"},{"location":"#LibIIO.XMLContext-Tuple{String}","page":"Home","title":"LibIIO.XMLContext","text":"XMLContext(xml_file)\n\nInitializes a new XMLContext using the XML backend if the IIO library.\n\nParameters\n\nxmlfile : Filename of the XML file to build the context from.\n\n\n\n\n\n","category":"method"},{"location":"#Base.length-Tuple{Buffer}","page":"Home","title":"Base.length","text":"length(buf::Buffer)\n\nSize of this buffer, in bytes.\n\n\n\n\n\n","category":"method"},{"location":"#Base.read","page":"Home","title":"Base.read","text":"read(chn::Channel, buf::AbstractBuffer, raw=false)\n\nExtract the samples corresponding to this channel from the given buffer.\n\nParameters\n\nchn::Channel : The channel instance\nbuf::AbstractBuffer :  A buffer instance\nraw::Bool:  If set to true, the samples are not converted from their               native format to their host format\n\nReturns\n\nA Vector{Cuchar} containing the samples for this channel\n\n\n\n\n\n","category":"function"},{"location":"#Base.read-Tuple{Buffer}","page":"Home","title":"Base.read","text":"read(buf::Buffer)\n\nRetrieves the samples contained inside the Buffer.\n\nReturns\n\nA Vector{Cuchar} containing the samples\n\n\n\n\n\n","category":"method"},{"location":"#Base.read-Tuple{LibIIO.Attr}","page":"Home","title":"Base.read","text":"read(::Attr)\n\nThe current value of this attribute (as string).\n\n\n\n\n\n","category":"method"},{"location":"#Base.write-Tuple{LibIIO.Attr, Any}","page":"Home","title":"Base.write","text":"write(::Attr, value)\n\nSets the value of the attribute to the passed value.\n\n\n\n\n\n","category":"method"},{"location":"#Base.write-Union{Tuple{T}, Tuple{Buffer, Vector{T}}} where T","page":"Home","title":"Base.write","text":"write(buf::Buffer, data::Vector{T}) where {T}\n\nCopy the given vector of samples into the buffer\n\nParameters\n\ndata : The data vector containing the samples to copy\n\nReturns\n\nThe number of bytes written into the buffer\n\n\n\n\n\n","category":"method"},{"location":"#Base.write-Union{Tuple{T}, Tuple{LibIIO.Channel, LibIIO.AbstractBuffer, Vector{T}}, Tuple{LibIIO.Channel, LibIIO.AbstractBuffer, Vector{T}, Any}} where T","page":"Home","title":"Base.write","text":"read(chn::Channel, buf::AbstractBuffer, data::Vector{T}, raw=false) where {T}\n\nWrite the specified vector of samples into the buffer the specified channel.\n\nParameters\n\nchn::Channel : The channel instance\nbuf::AbstractBuffer :  A buffer instance\ndata::Vector{T} : A data vector containing the samples to copy\nraw::Bool:  If set to true, the samples are not converted from their               host format to their native format\n\nReturns\n\nThe number of bytes written\n\n\n\n\n\n","category":"method"},{"location":"#LibIIO.attrs-Tuple{LibIIO.AbstractContext}","page":"Home","title":"LibIIO.attrs","text":"attrs(ctx::AbstractContext)\n\nLost of context-specific attributes.\n\n\n\n\n\n","category":"method"},{"location":"#LibIIO.attrs-Tuple{LibIIO.AbstractDeviceOrTrigger}","page":"Home","title":"LibIIO.attrs","text":"attrs(d::AbstractDeviceOrTrigger)\n\nList of attributes for the IIO device.\n\n\n\n\n\n","category":"method"},{"location":"#LibIIO.attrs-Tuple{LibIIO.Channel}","page":"Home","title":"LibIIO.attrs","text":"attrs(chn::Channel)\n\nList of attributes for the given channel.\n\n\n\n\n\n","category":"method"},{"location":"#LibIIO.buffer_attrs-Tuple{LibIIO.AbstractDeviceOrTrigger}","page":"Home","title":"LibIIO.buffer_attrs","text":"buffer_attrs(d::AbstractDeviceOrTrigger)\n\nList of buffer attributes for the IIO device.\n\n\n\n\n\n","category":"method"},{"location":"#LibIIO.cancel-Tuple{Buffer}","page":"Home","title":"LibIIO.cancel","text":"cancel(buf::Buffer)\n\nCancel the current buffer.\n\n\n\n\n\n","category":"method"},{"location":"#LibIIO.channels-Tuple{LibIIO.AbstractDeviceOrTrigger}","page":"Home","title":"LibIIO.channels","text":"channels(d::AbstractDeviceOrTrigger)\n\nList of channels available with this IIO device.\n\n\n\n\n\n","category":"method"},{"location":"#LibIIO.clone-Tuple{T} where T<:LibIIO.AbstractContext","page":"Home","title":"LibIIO.clone","text":"clone(ctx::T) where {T <: AbstractContext}\n\nClones the IIO context.\n\n\n\n\n\n","category":"method"},{"location":"#LibIIO.context-Tuple{Device}","page":"Home","title":"LibIIO.context","text":"context(d::Device)\n\nContext for the device.\n\n\n\n\n\n","category":"method"},{"location":"#LibIIO.data_format-Tuple{LibIIO.Channel}","page":"Home","title":"LibIIO.data_format","text":"data_format(chn::Channel)::iio_data_format\n\nReturns the channel data format as a C-struct. See iio_data_format.\n\n\n\n\n\n","category":"method"},{"location":"#LibIIO.debug_attrs-Tuple{LibIIO.AbstractDeviceOrTrigger}","page":"Home","title":"LibIIO.debug_attrs","text":"debug_attrs(d::AbstractDeviceOrTrigger)\n\nList of debug attributes for the IIO device.\n\n\n\n\n\n","category":"method"},{"location":"#LibIIO.description-Tuple{LibIIO.AbstractContext}","page":"Home","title":"LibIIO.description","text":"description(ctx::AbstractContext)\n\nDescription of this IIO context.\n\n\n\n\n\n","category":"method"},{"location":"#LibIIO.device-Tuple{Buffer}","page":"Home","title":"LibIIO.device","text":"device(buf::Buffer)\n\nDevice for the buffer.\n\n\n\n\n\n","category":"method"},{"location":"#LibIIO.device-Tuple{LibIIO.Channel}","page":"Home","title":"LibIIO.device","text":"device(chn::Channel)\n\nRetrieves the corresponding AbstractDeviceOrTrigger for this channel.\n\n\n\n\n\n","category":"method"},{"location":"#LibIIO.devices-Tuple{LibIIO.AbstractContext}","page":"Home","title":"LibIIO.devices","text":"devices(ctx::AbstractContext)\n\nList of devices contained in this context.\n\n\n\n\n\n","category":"method"},{"location":"#LibIIO.enabled!-Tuple{LibIIO.Channel, Any}","page":"Home","title":"LibIIO.enabled!","text":"enabled!(chn::Channel, state)\n\nSets the channel state to enabled if true, disabled otherwise.\n\n\n\n\n\n","category":"method"},{"location":"#LibIIO.enabled-Tuple{LibIIO.Channel}","page":"Home","title":"LibIIO.enabled","text":"enabled(chn::Channel)\n\nReturns true if the channel is enabled, false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"#LibIIO.filename-Tuple{LibIIO.Attr}","page":"Home","title":"LibIIO.filename","text":"filename(:Attr)\n\nThe filename in sysfs to which this attribute is bound.\n\n\n\n\n\n","category":"method"},{"location":"#LibIIO.find_channel","page":"Home","title":"LibIIO.find_channel","text":"find_channel(d::AbstractDeviceOrTrigger, name_or_id, is_output = false)\n\nFind an IIO channel by its name or ID.\n\nParameters\n\nd : The device instance\nname_or_id : The name or ID of the channel to find\nis_output : Set to true to search for an output channel\n\nReturns\n\nThe IIO channel as Channel\n\n\n\n\n\n","category":"function"},{"location":"#LibIIO.find_device-Tuple{LibIIO.AbstractContext, Any}","page":"Home","title":"LibIIO.find_device","text":"find_device(ctx::AbstractContext, name_or_id_or_label)\n\nFind an IIO device by its name, ID or label.\n\n\n\n\n\n","category":"method"},{"location":"#LibIIO.frequency!-Tuple{Trigger, Any}","page":"Home","title":"LibIIO.frequency!","text":"frequency!(t::Trigger, value)\n\nSet the trigger rate.\n\n\n\n\n\n","category":"method"},{"location":"#LibIIO.frequency-Tuple{Trigger}","page":"Home","title":"LibIIO.frequency","text":"frequency(t::Trigger)\n\nConfigured frequency (in Hz) of the trigger.\n\n\n\n\n\n","category":"method"},{"location":"#LibIIO.id-Tuple{LibIIO.AbstractDeviceOrTrigger}","page":"Home","title":"LibIIO.id","text":"id(d::AbstractDeviceOrTrigger)\n\nAn identifier of the device, only valid in this IIO context.\n\n\n\n\n\n","category":"method"},{"location":"#LibIIO.id-Tuple{LibIIO.Channel}","page":"Home","title":"LibIIO.id","text":"id(chn::Channel)\n\nAn identifier of this channel. Note that it is possible that two channels have the same ID, if one is an input channel and the other is an output channel.\n\n\n\n\n\n","category":"method"},{"location":"#LibIIO.index-Tuple{LibIIO.Channel}","page":"Home","title":"LibIIO.index","text":"index(chn::Channel)\n\nReturns the index of the channel.\n\n\n\n\n\n","category":"method"},{"location":"#LibIIO.label-Tuple{LibIIO.AbstractDeviceOrTrigger}","page":"Home","title":"LibIIO.label","text":"label(d::AbstractDeviceOrTrigger)\n\nThe label of the device.\n\n\n\n\n\n","category":"method"},{"location":"#LibIIO.modifier-Tuple{LibIIO.Channel}","page":"Home","title":"LibIIO.modifier","text":"modifier(chn::Channel)::iio_modifier\n\nReturns the channel modifier as an enum value.\n\n\n\n\n\n","category":"method"},{"location":"#LibIIO.name-Tuple{LibIIO.AbstractContext}","page":"Home","title":"LibIIO.name","text":"name(ctx::AbstractContext)\n\nName of the IIO context.\n\n\n\n\n\n","category":"method"},{"location":"#LibIIO.name-Tuple{LibIIO.AbstractDeviceOrTrigger}","page":"Home","title":"LibIIO.name","text":"name(d::AbstractDeviceOrTrigger)\n\nThe name of the device.\n\n\n\n\n\n","category":"method"},{"location":"#LibIIO.name-Tuple{LibIIO.Attr}","page":"Home","title":"LibIIO.name","text":"name(:Attr)\n\n\n\n\n\n","category":"method"},{"location":"#LibIIO.output-Tuple{LibIIO.Channel}","page":"Home","title":"LibIIO.output","text":"output(chn::Channel)\n\nContains true if the channel is an output channel, false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"#LibIIO.poll_fd-Tuple{Buffer}","page":"Home","title":"LibIIO.poll_fd","text":"poll_fd(buf::Buffer)\n\nPoll_fd for the buffer.\n\n\n\n\n\n","category":"method"},{"location":"#LibIIO.push-Tuple{Buffer}","page":"Home","title":"LibIIO.push","text":"push(buf::Buffer)\n\nSubmit the samples contained in this buffer to the hardware.\n\nParameters\n\nsamples_count (optional) : The number of samples to submit, default = full buffer\n\n\n\n\n\n","category":"method"},{"location":"#LibIIO.refill-Tuple{Buffer}","page":"Home","title":"LibIIO.refill","text":"refill(buf::Buffer)\n\nFetch a new set of samples from the hardware.\n\n\n\n\n\n","category":"method"},{"location":"#LibIIO.reg_read-Tuple{LibIIO.AbstractDeviceOrTrigger, Any}","page":"Home","title":"LibIIO.reg_read","text":"reg_read(d::AbstractDeviceOrTrigger, reg)\n\nRead the content of a register of this device.\n\nParameters\n\nd : The device instance\nreg : The register address\n\nReturns\n\nThe value of the register\n\n\n\n\n\n","category":"method"},{"location":"#LibIIO.reg_write-Tuple{LibIIO.AbstractDeviceOrTrigger, Any, Any}","page":"Home","title":"LibIIO.reg_write","text":"reg_write(d::AbstractDeviceOrTrigger, reg, value)\n\nSet a valie to one register of the device.\n\nParameters\n\nd : The device instance\nreg : The register address\nvalue ; The value that will be used for this register\n\n\n\n\n\n","category":"method"},{"location":"#LibIIO.sample_size-Tuple{LibIIO.AbstractDeviceOrTrigger}","page":"Home","title":"LibIIO.sample_size","text":"sample_size(d::AbstractDeviceOrTrigger)\n\nSample size of the device. The sample size varies each time channels get enabled or disabled.\n\n\n\n\n\n","category":"method"},{"location":"#LibIIO.scan_contexts-Tuple{}","page":"Home","title":"LibIIO.scan_contexts","text":"scan_contexts()\n\nScan Context.\n\n\n\n\n\n","category":"method"},{"location":"#LibIIO.scan_element-Tuple{LibIIO.Channel}","page":"Home","title":"LibIIO.scan_element","text":"scan_element(chn::Channel)\n\nContains true if the channel is a scan element, false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"#LibIIO.set_blocking_mode-Tuple{Buffer, Any}","page":"Home","title":"LibIIO.set_blocking_mode","text":"set_blocking_mode(buf::Buffer, blocking)\n\nSet the buffer's blocking mode.\n\nParameters:\n\nblocking : True if in blocking mode else false.\n\n\n\n\n\n","category":"method"},{"location":"#LibIIO.set_kernel_buffers_count-Tuple{LibIIO.AbstractDeviceOrTrigger, Any}","page":"Home","title":"LibIIO.set_kernel_buffers_count","text":"set_kernel_buffers_count(d::AbstractDeviceOrTrigger, count)\n\nSet the number of kernel buffers to use with the specified device\n\nParameters\n\nd : The device instance\ncount : The number of kernel buffers\n\n\n\n\n\n","category":"method"},{"location":"#LibIIO.set_timeout-Tuple{LibIIO.AbstractContext, Any}","page":"Home","title":"LibIIO.set_timeout","text":"set_timeout(ctx::AbstractContext, timeout)\n\nSet a timeout for I/O operations.\n\nParameters\n\nvalue : The timeout value, in milliseconds\n\n\n\n\n\n","category":"method"},{"location":"#LibIIO.step-Tuple{Buffer}","page":"Home","title":"LibIIO.step","text":"step(buf::Buffer)\n\nStep size for the buffer.\n\n\n\n\n\n","category":"method"},{"location":"#LibIIO.trigger!-Tuple{Device, Trigger}","page":"Home","title":"LibIIO.trigger!","text":"trigger!(d::Device, trigger::Trigger)\n\nSets the configured trigger for this IIO device.\n\n\n\n\n\n","category":"method"},{"location":"#LibIIO.trigger-Tuple{Device}","page":"Home","title":"LibIIO.trigger","text":"trigger(d::Device)\n\nReturns the configured trigger for this IIO device, if present in the current context.\n\n\n\n\n\n","category":"method"},{"location":"#LibIIO.type-Tuple{LibIIO.Channel}","page":"Home","title":"LibIIO.type","text":"type(chn::Channel)::iio_chan_type\n\nReturns the channel type as an enum value.\n\n\n\n\n\n","category":"method"},{"location":"#LibIIO.version-Tuple{LibIIO.AbstractContext}","page":"Home","title":"LibIIO.version","text":"version(ctx::AbstractContext)\n\nVersion of the context backed, as Tuple(UInt, UInt, String)`\n\n\n\n\n\n","category":"method"},{"location":"#LibIIO.xml-Tuple{LibIIO.AbstractContext}","page":"Home","title":"LibIIO.xml","text":"xml(ctx::AbstractContext)\n\nXML representation of the IIO context.\n\n\n\n\n\n","category":"method"}]
}
