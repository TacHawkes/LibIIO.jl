var documenterSearchIndex = {"docs":
[{"location":"cscan/","page":"Functions for scanning available contexts","title":"Functions for scanning available contexts","text":"","category":"page"},{"location":"cscan/","page":"Functions for scanning available contexts","title":"Functions for scanning available contexts","text":"Modules = [LibIIO.CLibIIO]\nPages = [\"scan.jl\"]","category":"page"},{"location":"cscan/#LibIIO.CLibIIO.iio_context_info_get_description-Tuple{Ptr{iio_context_info}}","page":"Functions for scanning available contexts","title":"LibIIO.CLibIIO.iio_context_info_get_description","text":"iio_context_info_get_description(info)\n\nGet a description of a discovered context.\n\nParameters\n\nPtr{iio_context_info}: A pointer to a iio_context_info structure.\n\nReturns\n\nA String containing the description.\n\nSee libiio\n\n\n\n\n\n","category":"method"},{"location":"cscan/#LibIIO.CLibIIO.iio_context_info_get_uri-Tuple{Ptr{iio_context_info}}","page":"Functions for scanning available contexts","title":"LibIIO.CLibIIO.iio_context_info_get_uri","text":"iio_context_info_get_uri(info)\n\nGet the URI of a discovered context.\n\nParameters\n\nPtr{iio_context_info}: A pointer to a iio_context_info structure.\n\nReturns\n\nA String containing the URI.\n\nSee libiio\n\n\n\n\n\n","category":"method"},{"location":"cscan/#LibIIO.CLibIIO.iio_context_info_list_free-Tuple{Ptr{Ptr{iio_context_info}}}","page":"Functions for scanning available contexts","title":"LibIIO.CLibIIO.iio_context_info_list_free","text":"iio_context_info_list_free(info)\n\nFree a context info list.\n\nParameters\n\ninfo::Ptr{Ptr{iio_context_info}} : A pointer to a iio_context_info pointer.\n\nSee libiio\n\n\n\n\n\n","category":"method"},{"location":"cscan/#LibIIO.CLibIIO.iio_create_scan_block","page":"Functions for scanning available contexts","title":"LibIIO.CLibIIO.iio_create_scan_block","text":"iio_create_scan_block(backend, flags = 0)\n\nParameters\n\nbackend::String : A string containing the backend to use for scanning. Can be empty                     to use all available backends.\nflags::Cuint (optional) :  Unused for now. Set to 0.\n\nReturns\n\non success, a pointer to an iio_scan_block  structure\non failure, an error is raised\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cscan/#LibIIO.CLibIIO.iio_create_scan_context","page":"Functions for scanning available contexts","title":"LibIIO.CLibIIO.iio_create_scan_context","text":"iio_create_scan_context(backend, flags = 0)\n\nCreate a scan context.\n\nParameters\n\nbackend::String : \tA string containing a comma-separated list of the backend(s) to use for scanning.\nflags::Cuint :\t    Unused for now. Set to 0.\n\nReturns\n\non success, a pointer to a iio_scan_context structure\nOn failure, an error is raised\n\nnote: Note\nLibiio version 0.20 and above can handle multiple strings, for instance \"local:usb:\", \"ip:usb:\", \"local:usb:ip:\", and require a colon as the delimiter. Libiio version 0.24 and above prefer a comma instead of colon as the delimiter, and handle specifying backend-specific information. For instance,  \"local,usb=0456:*\" will scan the local backend and limit scans on USB to vendor ID 0x0456, and accept all product IDs. The \"usb=0456:b673\" string would limit the scan to the device with this particular VID/PID. Both IDs are expected in hexadecimal, no 0x prefix needed.\n\n\n\n\n\n","category":"function"},{"location":"cscan/#LibIIO.CLibIIO.iio_scan_block_destroy-Tuple{Ptr{iio_scan_block}}","page":"Functions for scanning available contexts","title":"LibIIO.CLibIIO.iio_scan_block_destroy","text":"iio_scan_block_destroy(blk)\n\nDestroy the given scan block.\n\nParameters\n\nblk::Ptr{iio_scan_block} : A pointer to an iio_scan_block  structure\n\nnote: Note\nAfter that function, the iioscanblock pointer shall be invalid.\n\nIntroduced in version 0.20.\n\nSee libiio\n\n\n\n\n\n","category":"method"},{"location":"cscan/#LibIIO.CLibIIO.iio_scan_block_get_info-Tuple{Ptr{iio_scan_block}, UInt32}","page":"Functions for scanning available contexts","title":"LibIIO.CLibIIO.iio_scan_block_get_info","text":"iio_scan_block_get_info(blk, index)\n\nGet the iio_context_info for a particular context.\n\nParameters\n\nblk::Ptr{iio_scan_block} : A pointer to an iio_scan_block  structure\nindex::Cuint : The index corresponding to the context.\n\nReturns\n\nA pointer to the iio_context_info for the context\nOn success, a pointer to the specified iio_context_info\nOn failure, an error is raised\n\n\n\n\n\n","category":"method"},{"location":"cscan/#LibIIO.CLibIIO.iio_scan_block_scan-Tuple{Ptr{iio_scan_block}}","page":"Functions for scanning available contexts","title":"LibIIO.CLibIIO.iio_scan_block_scan","text":"iio_scan_block_scan(blk)\n\nEnumerate available contexts via scan block.\n\nParameters\n\nblk::Ptr{iio_scan_block} : A pointer to an iio_scan_block  structure\n\nReturns\n\nOn success, the number of contexts found.\nOn failure, a negative error number.\n\nSee libiio\n\n\n\n\n\n","category":"method"},{"location":"cscan/#LibIIO.CLibIIO.iio_scan_context_destroy-Tuple{Ptr{iio_scan_context}}","page":"Functions for scanning available contexts","title":"LibIIO.CLibIIO.iio_scan_context_destroy","text":"iio_scan_context_destroy(ctx)\n\nDestroy the given scan context.\n\nParameters\n\nctx::Ptr{iio_scan_context} : A pointer to an iio_scan_context  structure\n\nnote: Note\nAfter that function, the iio_scan_context  pointer shall be invalid.\n\nSee libiio\n\n\n\n\n\n","category":"method"},{"location":"cscan/#LibIIO.CLibIIO.iio_scan_context_get_info_list-Tuple{Ptr{iio_scan_context}, Ref{Ptr{Ptr{iio_context_info}}}}","page":"Functions for scanning available contexts","title":"LibIIO.CLibIIO.iio_scan_context_get_info_list","text":"iio_scan_context_get_info_list(ctx, info)\n\nEnumerate available contexts.\n\nParameters\n\nctx::Ptr{iio_scan_context} : A pointer to an iio_scan_context  structure\ninfo::Ref{Ptr{Ptr{iio_context_info}}} : A pointer to a list of iio_context_info pointers.                                           The pointed variable will be initialized on success.\n\nReturns\n\nOn success, the number of contexts found.\nOn failure, a negative error number.\n\nSee libiio\n\n\n\n\n\n","category":"method"},{"location":"buffer/","page":"Buffer","title":"Buffer","text":"Pages = [\"buffer.md\"]","category":"page"},{"location":"buffer/","page":"Buffer","title":"Buffer","text":"Modules = [LibIIO]\nPages = [\"buffer.jl\"]","category":"page"},{"location":"buffer/#LibIIO.Buffer","page":"Buffer","title":"LibIIO.Buffer","text":"This class is used for all I/O operations of buffer capable devices.\n\n\n\n\n\n","category":"type"},{"location":"buffer/#LibIIO.Buffer-Union{Tuple{T}, Tuple{T, Any}, Tuple{T, Any, Bool}} where T<:LibIIO.AbstractDeviceOrTrigger","page":"Buffer","title":"LibIIO.Buffer","text":"Buffer(device::T, samples_count, cyclic::Bool = false) where {T <: AbstractDeviceOrTrigger}\n\nInitializes a new Buffer instance.\n\nParameters\n\ndevice::AbstractDeviceOrTrigger :  A device instance (either Device or Trigger to which the buffer belongs\nsamples_count : The size of the buffer in samples\ncyclic : If set to true, the buffer is circular\n\n\n\n\n\n","category":"method"},{"location":"buffer/#Base.length-Tuple{Buffer}","page":"Buffer","title":"Base.length","text":"length(buf::Buffer)\n\nSize of this buffer, in bytes.\n\n\n\n\n\n","category":"method"},{"location":"buffer/#Base.read-Tuple{Buffer}","page":"Buffer","title":"Base.read","text":"read(buf::Buffer)\n\nRetrieves the samples contained inside the Buffer.\n\nReturns\n\nA Vector{Cuchar} containing the samples\n\n\n\n\n\n","category":"method"},{"location":"buffer/#Base.write-Union{Tuple{T}, Tuple{Buffer, Vector{T}}} where T","page":"Buffer","title":"Base.write","text":"write(buf::Buffer, data::Vector{T}) where {T}\n\nCopy the given vector of samples into the buffer\n\nParameters\n\ndata : The data vector containing the samples to copy\n\nReturns\n\nThe number of bytes written into the buffer\n\n\n\n\n\n","category":"method"},{"location":"buffer/#LibIIO.cancel-Tuple{Buffer}","page":"Buffer","title":"LibIIO.cancel","text":"cancel(buf::Buffer)\n\nCancel the current buffer.\n\n\n\n\n\n","category":"method"},{"location":"buffer/#LibIIO.device-Tuple{Buffer}","page":"Buffer","title":"LibIIO.device","text":"device(buf::Buffer)\n\nDevice for the buffer.\n\n\n\n\n\n","category":"method"},{"location":"buffer/#LibIIO.poll_fd-Tuple{Buffer}","page":"Buffer","title":"LibIIO.poll_fd","text":"poll_fd(buf::Buffer)\n\nPoll_fd for the buffer.\n\n\n\n\n\n","category":"method"},{"location":"buffer/#LibIIO.push-Tuple{Buffer}","page":"Buffer","title":"LibIIO.push","text":"push(buf::Buffer)\n\nSubmit the samples contained in this buffer to the hardware.\n\nParameters\n\nsamples_count (optional) : The number of samples to submit, default = full buffer\n\n\n\n\n\n","category":"method"},{"location":"buffer/#LibIIO.refill-Tuple{Buffer}","page":"Buffer","title":"LibIIO.refill","text":"refill(buf::Buffer)\n\nFetch a new set of samples from the hardware.\n\n\n\n\n\n","category":"method"},{"location":"buffer/#LibIIO.set_blocking_mode-Tuple{Buffer, Any}","page":"Buffer","title":"LibIIO.set_blocking_mode","text":"set_blocking_mode(buf::Buffer, blocking)\n\nSet the buffer's blocking mode.\n\nParameters:\n\nblocking : True if in blocking mode else false.\n\n\n\n\n\n","category":"method"},{"location":"buffer/#LibIIO.step-Tuple{Buffer}","page":"Buffer","title":"LibIIO.step","text":"step(buf::Buffer)\n\nStep size for the buffer.\n\n\n\n\n\n","category":"method"},{"location":"cchannel/","page":"Channel","title":"Channel","text":"CurrentModule = LibIIO.CLibIIO","category":"page"},{"location":"cchannel/#Index","page":"Channel","title":"Index","text":"","category":"section"},{"location":"cchannel/","page":"Channel","title":"Channel","text":"Pages = [\"cchannel.md\"]","category":"page"},{"location":"cchannel/#Documentation","page":"Channel","title":"Documentation","text":"","category":"section"},{"location":"cchannel/","page":"Channel","title":"Channel","text":"iio_channel_get_device\niio_channel_get_id\niio_channel_get_name\niio_channel_is_output\niio_channel_is_scan_element\niio_channel_get_attrs_count\niio_channel_get_attr\niio_channel_find_attr\niio_channel_attr_get_filename\niio_channel_attr_read\niio_channel_attr_read_all\niio_channel_attr_read_bool\niio_channel_attr_read_longlong\niio_channel_attr_read_double\niio_channel_attr_write\niio_channel_attr_write_raw\niio_channel_attr_write_all\niio_channel_attr_write_bool\niio_channel_attr_write_longlong\niio_channel_attr_write_double\niio_channel_enable\niio_channel_disable\niio_channel_is_enabled\niio_channel_read_raw\niio_channel_read\niio_channel_write_raw\niio_channel_write\niio_channel_set_data\niio_channel_get_data\niio_channel_get_type\niio_channel_get_modifier","category":"page"},{"location":"cchannel/#LibIIO.CLibIIO.iio_channel_get_device","page":"Channel","title":"LibIIO.CLibIIO.iio_channel_get_device","text":"iio_channel_get_device(chn)\n\nRetrieve a pointer to the iio_device structure.\n\nParameters\n\nchn::Ptr{iio_channel} : A pointer to an iio_channel structure\n\nReturns\n\nA pointer to a iio_device structure\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cchannel/#LibIIO.CLibIIO.iio_channel_get_id","page":"Channel","title":"LibIIO.CLibIIO.iio_channel_get_id","text":"iio_channel_get_id(chn)\n\nRetrieve the channel ID (e.g. voltage0)\n\nParameters\n\nchn::Ptr{iio_channel} : A pointer to an iio_channel structure\n\nReturns\n\nA string with the channel ID\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cchannel/#LibIIO.CLibIIO.iio_channel_get_name","page":"Channel","title":"LibIIO.CLibIIO.iio_channel_get_name","text":"iio_channel_get_name(chn)\n\nRetrieve the channel name (e.g. vccint)\n\nParameters\n\nchn::Ptr{iio_channel} : A pointer to an iio_channel structure\n\nReturns\n\nA string with the channel name\n\nnote: Note\nIf the channel has no name, an empty string is returned.\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cchannel/#LibIIO.CLibIIO.iio_channel_is_output","page":"Channel","title":"LibIIO.CLibIIO.iio_channel_is_output","text":"iio_channel_is_output(chn)\n\nReturn true if the given channel is an output channel\n\nParameters\n\nchn::Ptr{iio_channel} : A pointer to an iio_channel structure\n\nReturns\n\nTrue if the channel is an output channel, false otherweise\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cchannel/#LibIIO.CLibIIO.iio_channel_is_scan_element","page":"Channel","title":"LibIIO.CLibIIO.iio_channel_is_scan_element","text":"iio_channel_is_scan_element(chn)\n\nReturn true of the given channel is a scan element.\n\nParameters\n\nchn::Ptr{iio_channel} : A pointer to an iio_channel structure\n\nReturns\n\nTrue if the channel is a scan element, false otherweise\n\nnote: Note\nA channel that is a scan element is a channel that can generate samples (for an input channel) or receive samples (for an output channel) after being enabled.\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cchannel/#LibIIO.CLibIIO.iio_channel_get_attrs_count","page":"Channel","title":"LibIIO.CLibIIO.iio_channel_get_attrs_count","text":"iio_channel_get_attrs_count(chn)\n\nEnumerate the channel-specific attributes of the given channel.\n\nParameters\n\nchn::Ptr{iio_channel} : A pointer to an iio_channel structure\n\nReturns\n\nThe number of channel-specific attributes found\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cchannel/#LibIIO.CLibIIO.iio_channel_get_attr","page":"Channel","title":"LibIIO.CLibIIO.iio_channel_get_attr","text":"iio_channel_get_attr(chn, index)\n\nGet the channel-specific attribute present at the given index.\n\nParameters\n\nchn::Ptr{iio_channel} : A pointer to an iio_channel structure\nindex::Cuint : The index corresponding to the attribute\n\nReturns\n\nOn success, a string containing the attribute name\nIf the index is invalid, an empty string will be returned\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cchannel/#LibIIO.CLibIIO.iio_channel_find_attr","page":"Channel","title":"LibIIO.CLibIIO.iio_channel_find_attr","text":"iio_channel_find_attr(chn, name)\n\nTry to find a channel-specific attribute by its name.\n\nParameters\n\nchn::Ptr{iio_channel} : A pointer to an iio_channel structure\nname::String : A string corresponding to the name of the attribute\n\nReturns\n\nOn succes, a string containing the attribute name\nIf the name does not correspond to any know atribute of the channel, an empty string is returned\n\nnote: Note\nThis function is useful to detect the presence of an attribute.\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cchannel/#LibIIO.CLibIIO.iio_channel_attr_get_filename","page":"Channel","title":"LibIIO.CLibIIO.iio_channel_attr_get_filename","text":"iio_channel_attr_get_filename(chn, attr)\n\nRetrieve the filename of an attribute.\n\nParameters\n\nchn::Ptr{iio_channel} : A pointer to an iio_channel structure\nattr::String ; A string corresponding to the name of the attribute\n\nReturns\n\nOn success, a string with the filename\nIf the attribute is unknown, an empty string is returned\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cchannel/#LibIIO.CLibIIO.iio_channel_attr_read","page":"Channel","title":"LibIIO.CLibIIO.iio_channel_attr_read","text":"iio_channel_attr_read(dev, attr)\n\nRead the content of the given channel-specific attribute.\n\nParameters\n\nchn::Ptr{iio_channel} : A pointer to an iio_channel structure\nattr::String : A string corresponding to the name of the attribute\n\nReturns\n\nOn success, a Vector of Tuples of attribute index and value if attr is an empty string, otherwise a string with the attribute value.\nOn error, a negative errno code is returned\n\nnote: Note\nBy an empty string as the \"attr\" argument to iio_channel_attr_read, it is now possible to read all of the attributes of a device.\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cchannel/#LibIIO.CLibIIO.iio_channel_attr_read_all","page":"Channel","title":"LibIIO.CLibIIO.iio_channel_attr_read_all","text":"iio_channel_attr_read_all(dev, cb, data)\n\nRead the content of all channel-specific attributes.\n\nParameters\n\nchn::Ptr{iio_channel} : A pointer to an iio_channel structure\ncb::Ptr{Cvoid} : A pointer to a callback function\ndata::Ptr{Cvoid} : A pointer that will be passed to the callback function\n\nReturns\n\nOn success, 0 is returned\nOn error, a negative errno code is returned\n\nnote: Note\nThis function is especially useful when used with the network backend, as all the channel-specific attributes are read in one single command.\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cchannel/#LibIIO.CLibIIO.iio_channel_attr_read_bool","page":"Channel","title":"LibIIO.CLibIIO.iio_channel_attr_read_bool","text":"iio_channel_attr_read_bool(dev, attr)\n\nRead the content of the given channel-specific attribute.\n\nParameters\n\nchn::Ptr{iio_channel} : A pointer to an iio_channel structure\nattr::String : A string corresponding to the name of the attribute\n\nReturns\n\nOn success, 0 and the bool value is returned\nOn error, a negative errno code is returned\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cchannel/#LibIIO.CLibIIO.iio_channel_attr_read_longlong","page":"Channel","title":"LibIIO.CLibIIO.iio_channel_attr_read_longlong","text":"iio_channel_attr_read_longlong(dev, attr)\n\nRead the content of the given channel-specific attribute.\n\nParameters\n\nchn::Ptr{iio_channel} : A pointer to an iio_channel structure\nattr::String : A string corresponding to the name of the attribute\n\nReturns\n\nOn success, 0 and the Clonglong value is returned\nOn error, a negative errno code is returned\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cchannel/#LibIIO.CLibIIO.iio_channel_attr_read_double","page":"Channel","title":"LibIIO.CLibIIO.iio_channel_attr_read_double","text":"iio_channel_attr_read_double(dev, attr)\n\nRead the content of the given channel-specific attribute.\n\nParameters\n\nchn::Ptr{iio_channel} : A pointer to an iio_channel structure\nattr::String : A string corresponding to the name of the attribute\n\nReturns\n\nOn success, 0 and the Cdouble value is returned\nOn error, a negative errno code is returned\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cchannel/#LibIIO.CLibIIO.iio_channel_attr_write","page":"Channel","title":"LibIIO.CLibIIO.iio_channel_attr_write","text":"iio_channel_attr_write(dev, attr, src)\n\nSet the value of the given channel-specific attribute.\n\nParameters\n\nchn::Ptr{iio_channel} : A pointer to an iio_channel structure\nattr::String : A string corresponding to the name of the attribute\nsrc::String A string to set the attribute to\n\nReturns\n\nOn success, the number of bytes written\nOn error, a negative errno code is returned\n\nnote: Note\nBy passing C_NULL as the \"attr\" argument to iio_channel_attr_write, it is now possible to write all of the attributes of a device.The buffer must contain one block of data per attribute of the device, by the order they appear in the iio_device structure.The first four bytes of one block correspond to a 32-bit signed value in network order. If negative, the attribute is not written; if positive, it corresponds to the length of the data to write. In that case, the rest of the block must contain the data.\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cchannel/#LibIIO.CLibIIO.iio_channel_attr_write_raw","page":"Channel","title":"LibIIO.CLibIIO.iio_channel_attr_write_raw","text":"iio_channel_attr_write_raw(dev, attr, src, len)\n\nSet the value of the given channel-specific attribute.\n\nParameters\n\nchn::Ptr{iio_channel} : A pointer to an iio_channel structure\nattr::String : A string corresponding to the name of the attribute\nsrc::Ptr{Cvoid} : A pointer to the data to be written\nlen::Csize_t : The number of bytes that should be written\n\nReturns\n\nOn success, the number of bytes written\nOn error, a negative errno code is returned\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cchannel/#LibIIO.CLibIIO.iio_channel_attr_write_all","page":"Channel","title":"LibIIO.CLibIIO.iio_channel_attr_write_all","text":"iio_channel_attr_write_all(dev, cb, data)\n\nSet the values of all channel-specifc attributes.\n\nParameters\n\nchn::Ptr{iio_channel} : A pointer to an iio_channel structure\ncb::Ptr{Cvoid} : A pointer to a callback function\ndata::Ptr{Cvoid} : A pointer that will be passed to the callback function\n\nReturns\n\nOn success, 0 is returned\nOn error, a negative errno code is returned\n\nnote: Note\nThis function is especially useful when used with the network backend, as all the chsnnel-specific attributes are written in one single command.\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cchannel/#LibIIO.CLibIIO.iio_channel_attr_write_bool","page":"Channel","title":"LibIIO.CLibIIO.iio_channel_attr_write_bool","text":"iio_channel_attr_write_bool(dev, attr, val)\n\nSet the value of the given channel-specific attribute.\n\nParameters\n\nchn::Ptr{iio_channel} : A pointer to an iio_channel structure\nattr::String : A string corresponding to the name of the attribute\nval::Bool : A bool value to set the attribute to\n\nReturns\n\nOn success, 0 is returned\nOn error, a negative errno code is returned\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cchannel/#LibIIO.CLibIIO.iio_channel_attr_write_longlong","page":"Channel","title":"LibIIO.CLibIIO.iio_channel_attr_write_longlong","text":"iio_channel_attr_write_longlong(dev, attr, val)\n\nSet the value of the given channel-specific attribute.\n\nParameters\n\nchn::Ptr{iio_channel} : A pointer to an iio_channel structure\nattr::String : A string corresponding to the name of the attribute\nval::Clonglong : A Clonglong value to set the attribute to\n\nReturns\n\nOn success, 0 is returned\nOn error, a negative errno code is returned\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cchannel/#LibIIO.CLibIIO.iio_channel_attr_write_double","page":"Channel","title":"LibIIO.CLibIIO.iio_channel_attr_write_double","text":"iio_channel_attr_write_double(dev, attr, val)\n\nSet the value of the given channel-specific attribute.\n\nParameters\n\nchn::Ptr{iio_channel} : A pointer to an iio_channel structure\nattr::String : A string corresponding to the name of the attribute\nval::Cdouble : A Cdouble value to set the attribute to\n\nReturns\n\nOn success, 0 is returned\nOn error, a negative errno code is returned\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cchannel/#LibIIO.CLibIIO.iio_channel_enable","page":"Channel","title":"LibIIO.CLibIIO.iio_channel_enable","text":"iio_channel_enable(chn)\n\nEnable the given channel.\n\nParameters\n\nchn::Ptr{iio_channel} : A pointer to an iio_channel structure\n\nnote: Note\nBefore creating an iio_buffer structure with iio_device_create_buffer, it is required to enable at least one channel of the device to read from.\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cchannel/#LibIIO.CLibIIO.iio_channel_disable","page":"Channel","title":"LibIIO.CLibIIO.iio_channel_disable","text":"iio_channel_disable(chn)\n\nDisable the given channel.\n\nParameters\n\nchn::Ptr{iio_channel} : A pointer to an iio_channel structure\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cchannel/#LibIIO.CLibIIO.iio_channel_is_enabled","page":"Channel","title":"LibIIO.CLibIIO.iio_channel_is_enabled","text":"iio_channel_is_enabled(chn)\n\nReturns true of the channel is enabled.\n\nParameters\n\nchn::Ptr{iio_channel} : A pointer to an iio_channel structure\n\nReturns\n\nTrue if the channel is enabled, false otherwise\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cchannel/#LibIIO.CLibIIO.iio_channel_read_raw","page":"Channel","title":"LibIIO.CLibIIO.iio_channel_read_raw","text":"iio_channel_read_raw(chn, buffer, dst)\n\nDemultiplex the samples of a given channel.\n\nParameters\n\nchn::Ptr{iio_channel} : A pointer to an iio_channel structure\nbuffer::Ptr{iio_buffer} : A pointer to an iio_buffer structure\ndst::Vector{Cuchar} : A destination memory area where the demultiplexed data will be stored\n\nReturns\n\nThe size of the demultiplexed data, in bytes\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cchannel/#LibIIO.CLibIIO.iio_channel_read","page":"Channel","title":"LibIIO.CLibIIO.iio_channel_read","text":"iio_channel_read(chn, buffer, dst)\n\nDemultiplex and convert the samples of a given channel.\n\nParameters\n\nchn::Ptr{iio_channel} : A pointer to an iio_channel structure\nbuffer::Ptr{iio_buffer} : A pointer to an iio_buffer structure\ndst::Vector{Cuchar} : A destination memory area where the converted data will be stored\n\nReturns\n\nThe size of the converted data, in bytes\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cchannel/#LibIIO.CLibIIO.iio_channel_write_raw","page":"Channel","title":"LibIIO.CLibIIO.iio_channel_write_raw","text":"iio_channel_write_raw(chn, buffer, dst)\n\nMultiplex the samples of a given channel.\n\nParameters\n\nchn::Ptr{iio_channel} : A pointer to an iio_channel structure\nbuffer::Ptr{iio_buffer} : A pointer to an iio_buffer structure\nsrc::Vector{Cuchar} : A source memory area where the sequential data will be read from\n\nReturns\n\nThe number of bytes actually multiplexed\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cchannel/#LibIIO.CLibIIO.iio_channel_write","page":"Channel","title":"LibIIO.CLibIIO.iio_channel_write","text":"iio_channel_write(chn, buffer, dst)\n\nConvert and multiplex the samples of a given channel.\n\nParameters\n\nchn::Ptr{iio_channel} : A pointer to an iio_channel structure\nbuffer::Ptr{iio_buffer} : A pointer to an iio_buffer structure\nsrc::Vector{Cuchar} : A source memory area where the sequential data will be read from\n\nReturns\n\nThe number of bytes actually converted and multiplexed\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cchannel/#LibIIO.CLibIIO.iio_channel_set_data","page":"Channel","title":"LibIIO.CLibIIO.iio_channel_set_data","text":"iio_channel_set_data(dev, data)\n\nAssociate a pointer to an iio_channel structure.\n\nParameters\n\nchn::Ptr{iio_channel} : A pointer to an iio_channel structure\ndata::Ptr{Cvoid} : The pointer to be associated\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cchannel/#LibIIO.CLibIIO.iio_channel_get_data","page":"Channel","title":"LibIIO.CLibIIO.iio_channel_get_data","text":"iio_channel_get_data(dev)\n\nRetrieve a previously associated pointer of an iio_channel structure.\n\nParameters\n\nchn::Ptr{iio_channel} : A pointer to an iio_channel structure\n\nReturns\n\nThe pointer previously associated if present, or C_NULL\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cchannel/#LibIIO.CLibIIO.iio_channel_get_type","page":"Channel","title":"LibIIO.CLibIIO.iio_channel_get_type","text":"iio_channel_get_type(chn)\n\nGet the type of the given channel.\n\nParameters\n\nchn::Ptr{iio_channel} : A pointer to an iio_channel structure\n\nReturns\n\nThe type of the channel\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cchannel/#LibIIO.CLibIIO.iio_channel_get_modifier","page":"Channel","title":"LibIIO.CLibIIO.iio_channel_get_modifier","text":"iio_channel_get_modifier(chn)\n\nGet the modifier type of the given channel.\n\nParameters\n\nchn::Ptr{iio_channel} : A pointer to an iio_channel structure\n\nReturns\n\nThe modifier type of the channel\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"channel/","page":"Channel","title":"Channel","text":"Pages = [\"channel.md\"]","category":"page"},{"location":"channel/","page":"Channel","title":"Channel","text":"Modules = [LibIIO]\nPages = [\"channel.jl\"]","category":"page"},{"location":"channel/#LibIIO.Channel","page":"Channel","title":"LibIIO.Channel","text":"Channel{T <: AbstractDeviceOrTrigger} <: AbstractChannel\n\nRepresents a channel of an IIO device.\n\n\n\n\n\n","category":"type"},{"location":"channel/#LibIIO.Channel-Tuple{LibIIO.AbstractDeviceOrTrigger, Ptr{iio_channel}}","page":"Channel","title":"LibIIO.Channel","text":"Channel(dev::AbstractDeviceOrTrigger, channel::Ptr{iio_channel})\n\nInitializes a new instance of the Channel type.\n\nParameters\n\ndev::AbstractDeviceOrTrigger : The parent device handle (Device or Trigger)\nchannel::Ptr{iio_channel} :  A valid pointer to an IIO channel.\n\nReturns\n\nA new instance of this type\n\n\n\n\n\n","category":"method"},{"location":"channel/#LibIIO.ChannelAttr","page":"Channel","title":"LibIIO.ChannelAttr","text":"ChannelAttr <: Attr\n\nRepresents an attribute of a IIO channel\n\n\n\n\n\n","category":"type"},{"location":"channel/#LibIIO.ChannelAttr-Tuple{Ptr{iio_channel}, String}","page":"Channel","title":"LibIIO.ChannelAttr","text":"ChannelAttr(chn::Ptr{iio_channel}, name::String)\n\nInitializes a new instance of a ChannelAttr.\n\nParameters\n\nchn::Ptr{iio_channel} : A valid pointer to an iio_channel\nname::String : The channel attribute's name\n\nReturns\n\nA new instance of this type\n\n\n\n\n\n","category":"method"},{"location":"channel/#Base.read","page":"Channel","title":"Base.read","text":"read(chn::Channel, buf::AbstractBuffer, raw=false)\n\nExtract the samples corresponding to this channel from the given buffer.\n\nParameters\n\nchn::Channel : The channel instance\nbuf::AbstractBuffer :  A buffer instance\nraw::Bool:  If set to true, the samples are not converted from their               native format to their host format\n\nReturns\n\nA Vector{Cuchar} containing the samples for this channel\n\n\n\n\n\n","category":"function"},{"location":"channel/#Base.write-Union{Tuple{T}, Tuple{LibIIO.Channel, LibIIO.AbstractBuffer, Vector{T}}, Tuple{LibIIO.Channel, LibIIO.AbstractBuffer, Vector{T}, Any}} where T","page":"Channel","title":"Base.write","text":"read(chn::Channel, buf::AbstractBuffer, data::Vector{T}, raw=false) where {T}\n\nWrite the specified vector of samples into the buffer the specified channel.\n\nParameters\n\nchn::Channel : The channel instance\nbuf::AbstractBuffer :  A buffer instance\ndata::Vector{T} : A data vector containing the samples to copy\nraw::Bool:  If set to true, the samples are not converted from their               host format to their native format\n\nReturns\n\nThe number of bytes written\n\n\n\n\n\n","category":"method"},{"location":"channel/#LibIIO.attrs-Tuple{LibIIO.Channel}","page":"Channel","title":"LibIIO.attrs","text":"attrs(chn::Channel)\n\nList of attributes for the given channel.\n\n\n\n\n\n","category":"method"},{"location":"channel/#LibIIO.data_format-Tuple{LibIIO.Channel}","page":"Channel","title":"LibIIO.data_format","text":"data_format(chn::Channel)::iio_data_format\n\nReturns the channel data format as a C-struct. See iio_data_format.\n\n\n\n\n\n","category":"method"},{"location":"channel/#LibIIO.device-Tuple{LibIIO.Channel}","page":"Channel","title":"LibIIO.device","text":"device(chn::Channel)\n\nRetrieves the corresponding AbstractDeviceOrTrigger for this channel.\n\n\n\n\n\n","category":"method"},{"location":"channel/#LibIIO.enabled!-Tuple{LibIIO.Channel, Any}","page":"Channel","title":"LibIIO.enabled!","text":"enabled!(chn::Channel, state)\n\nSets the channel state to enabled if true, disabled otherwise.\n\n\n\n\n\n","category":"method"},{"location":"channel/#LibIIO.enabled-Tuple{LibIIO.Channel}","page":"Channel","title":"LibIIO.enabled","text":"enabled(chn::Channel)\n\nReturns true if the channel is enabled, false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"channel/#LibIIO.id-Tuple{LibIIO.Channel}","page":"Channel","title":"LibIIO.id","text":"id(chn::Channel)\n\nAn identifier of this channel. Note that it is possible that two channels have the same ID, if one is an input channel and the other is an output channel.\n\n\n\n\n\n","category":"method"},{"location":"channel/#LibIIO.index-Tuple{LibIIO.Channel}","page":"Channel","title":"LibIIO.index","text":"index(chn::Channel)\n\nReturns the index of the channel.\n\n\n\n\n\n","category":"method"},{"location":"channel/#LibIIO.modifier-Tuple{LibIIO.Channel}","page":"Channel","title":"LibIIO.modifier","text":"modifier(chn::Channel)::iio_modifier\n\nReturns the channel modifier as an enum value.\n\n\n\n\n\n","category":"method"},{"location":"channel/#LibIIO.output-Tuple{LibIIO.Channel}","page":"Channel","title":"LibIIO.output","text":"output(chn::Channel)\n\nContains true if the channel is an output channel, false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"channel/#LibIIO.scan_element-Tuple{LibIIO.Channel}","page":"Channel","title":"LibIIO.scan_element","text":"scan_element(chn::Channel)\n\nContains true if the channel is a scan element, false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"channel/#LibIIO.type-Tuple{LibIIO.Channel}","page":"Channel","title":"LibIIO.type","text":"type(chn::Channel)::iio_chan_type\n\nReturns the channel type as an enum value.\n\n\n\n\n\n","category":"method"},{"location":"device/","page":"Devices","title":"Devices","text":"CurrentModule = LibIIO","category":"page"},{"location":"device/","page":"Devices","title":"Devices","text":"","category":"page"},{"location":"device/","page":"Devices","title":"Devices","text":"Modules = [LibIIO]\nPages = [\"device.jl\"]","category":"page"},{"location":"device/#LibIIO.Device","page":"Devices","title":"LibIIO.Device","text":"Contains the representation of an IIO device.\n\n\n\n\n\n","category":"type"},{"location":"device/#LibIIO.Device-Tuple{LibIIO.AbstractContext, Ptr{iio_device}}","page":"Devices","title":"LibIIO.Device","text":"Device(ctx::AbstractContext, device::Ptr{iio_device})\n\nInitializes a new Device instance.\n\nParameters\n\nctx : The IIO context instance with which the device is accessed\ndevice : A pointer to an iio_device which represents this device\n\n\n\n\n\n","category":"method"},{"location":"device/#LibIIO.DeviceAttr","page":"Devices","title":"LibIIO.DeviceAttr","text":"DeviceAttr <: Attr\n\nRepresents an attribute of an IIO device\n\n\n\n\n\n","category":"type"},{"location":"device/#LibIIO.DeviceBufferAttr","page":"Devices","title":"LibIIO.DeviceBufferAttr","text":"DeviceAttr <: Attr\n\nRepresents a buffer attribute of an IIO device\n\n\n\n\n\n","category":"type"},{"location":"device/#LibIIO.DeviceDebugAttr","page":"Devices","title":"LibIIO.DeviceDebugAttr","text":"DeviceAttr <: Attr\n\nRepresents a debug attribute of an IIO device\n\n\n\n\n\n","category":"type"},{"location":"device/#LibIIO.Trigger","page":"Devices","title":"LibIIO.Trigger","text":"Contains the representation of an IIO device that can act as a trigger.\n\n\n\n\n\n","category":"type"},{"location":"device/#LibIIO.Trigger-Tuple{LibIIO.AbstractContext, Ptr{iio_device}}","page":"Devices","title":"LibIIO.Trigger","text":"Trigger(ctx::AbstractContext, device::Ptr{iio_device})\n\nInitializes a new Trigger instance.\n\nParameters\n\nctx : The IIO context instance with which the device is accessed\ndevice : A pointer to an iio_device which represents this trigger\n\n\n\n\n\n","category":"method"},{"location":"device/#LibIIO.attrs-Tuple{LibIIO.AbstractDeviceOrTrigger}","page":"Devices","title":"LibIIO.attrs","text":"attrs(d::AbstractDeviceOrTrigger)\n\nList of attributes for the IIO device.\n\n\n\n\n\n","category":"method"},{"location":"device/#LibIIO.buffer_attrs-Tuple{LibIIO.AbstractDeviceOrTrigger}","page":"Devices","title":"LibIIO.buffer_attrs","text":"buffer_attrs(d::AbstractDeviceOrTrigger)\n\nList of buffer attributes for the IIO device.\n\n\n\n\n\n","category":"method"},{"location":"device/#LibIIO.channels-Tuple{LibIIO.AbstractDeviceOrTrigger}","page":"Devices","title":"LibIIO.channels","text":"channels(d::AbstractDeviceOrTrigger)\n\nList of channels available with this IIO device.\n\n\n\n\n\n","category":"method"},{"location":"device/#LibIIO.context-Tuple{Device}","page":"Devices","title":"LibIIO.context","text":"context(d::Device)\n\nContext for the device.\n\n\n\n\n\n","category":"method"},{"location":"device/#LibIIO.debug_attrs-Tuple{LibIIO.AbstractDeviceOrTrigger}","page":"Devices","title":"LibIIO.debug_attrs","text":"debug_attrs(d::AbstractDeviceOrTrigger)\n\nList of debug attributes for the IIO device.\n\n\n\n\n\n","category":"method"},{"location":"device/#LibIIO.find_channel","page":"Devices","title":"LibIIO.find_channel","text":"find_channel(d::AbstractDeviceOrTrigger, name_or_id, is_output = false)\n\nFind an IIO channel by its name or ID.\n\nParameters\n\nd : The device instance\nname_or_id : The name or ID of the channel to find\nis_output : Set to true to search for an output channel\n\nReturns\n\nThe IIO channel as Channel\n\n\n\n\n\n","category":"function"},{"location":"device/#LibIIO.frequency!-Tuple{Trigger, Any}","page":"Devices","title":"LibIIO.frequency!","text":"frequency!(t::Trigger, value)\n\nSet the trigger rate.\n\n\n\n\n\n","category":"method"},{"location":"device/#LibIIO.frequency-Tuple{Trigger}","page":"Devices","title":"LibIIO.frequency","text":"frequency(t::Trigger)\n\nConfigured frequency (in Hz) of the trigger.\n\n\n\n\n\n","category":"method"},{"location":"device/#LibIIO.id-Tuple{LibIIO.AbstractDeviceOrTrigger}","page":"Devices","title":"LibIIO.id","text":"id(d::AbstractDeviceOrTrigger)\n\nAn identifier of the device, only valid in this IIO context.\n\n\n\n\n\n","category":"method"},{"location":"device/#LibIIO.label-Tuple{LibIIO.AbstractDeviceOrTrigger}","page":"Devices","title":"LibIIO.label","text":"label(d::AbstractDeviceOrTrigger)\n\nThe label of the device.\n\n\n\n\n\n","category":"method"},{"location":"device/#LibIIO.name-Tuple{LibIIO.AbstractDeviceOrTrigger}","page":"Devices","title":"LibIIO.name","text":"name(d::AbstractDeviceOrTrigger)\n\nThe name of the device.\n\n\n\n\n\n","category":"method"},{"location":"device/#LibIIO.reg_read-Tuple{LibIIO.AbstractDeviceOrTrigger, Any}","page":"Devices","title":"LibIIO.reg_read","text":"reg_read(d::AbstractDeviceOrTrigger, reg)\n\nRead the content of a register of this device.\n\nParameters\n\nd : The device instance\nreg : The register address\n\nReturns\n\nThe value of the register\n\n\n\n\n\n","category":"method"},{"location":"device/#LibIIO.reg_write-Tuple{LibIIO.AbstractDeviceOrTrigger, Any, Any}","page":"Devices","title":"LibIIO.reg_write","text":"reg_write(d::AbstractDeviceOrTrigger, reg, value)\n\nSet a valie to one register of the device.\n\nParameters\n\nd : The device instance\nreg : The register address\nvalue ; The value that will be used for this register\n\n\n\n\n\n","category":"method"},{"location":"device/#LibIIO.sample_size-Tuple{LibIIO.AbstractDeviceOrTrigger}","page":"Devices","title":"LibIIO.sample_size","text":"sample_size(d::AbstractDeviceOrTrigger)\n\nSample size of the device. The sample size varies each time channels get enabled or disabled.\n\n\n\n\n\n","category":"method"},{"location":"device/#LibIIO.set_kernel_buffers_count-Tuple{LibIIO.AbstractDeviceOrTrigger, Any}","page":"Devices","title":"LibIIO.set_kernel_buffers_count","text":"set_kernel_buffers_count(d::AbstractDeviceOrTrigger, count)\n\nSet the number of kernel buffers to use with the specified device\n\nParameters\n\nd : The device instance\ncount : The number of kernel buffers\n\n\n\n\n\n","category":"method"},{"location":"device/#LibIIO.trigger!-Tuple{Device, Trigger}","page":"Devices","title":"LibIIO.trigger!","text":"trigger!(d::Device, trigger::Trigger)\n\nSets the configured trigger for this IIO device.\n\n\n\n\n\n","category":"method"},{"location":"device/#LibIIO.trigger-Tuple{Device}","page":"Devices","title":"LibIIO.trigger","text":"trigger(d::Device)\n\nReturns the configured trigger for this IIO device, if present in the current context.\n\n\n\n\n\n","category":"method"},{"location":"cindex/","page":"Overview","title":"Overview","text":"CurrentModule = LibIIO","category":"page"},{"location":"cindex/","page":"Overview","title":"Overview","text":"","category":"page"},{"location":"cindex/","page":"Overview","title":"Overview","text":"Modules = [LibIIO.CLibIIO]\nPages = [\"ctypes.jl\"]","category":"page"},{"location":"cindex/#LibIIO.CLibIIO.iio_buffer","page":"Overview","title":"LibIIO.CLibIIO.iio_buffer","text":"An input or output buffer, used to read or write samples\n\nSee libiio\n\n\n\n\n\n","category":"type"},{"location":"cindex/#LibIIO.CLibIIO.iio_chan_type","page":"Overview","title":"LibIIO.CLibIIO.iio_chan_type","text":"iio_chan_type\n\nIIO channel type\n\nAn IIO channel has a type specifying the type of data associated with the channel.\n\nSee libiio\n\n\n\n\n\n","category":"type"},{"location":"cindex/#LibIIO.CLibIIO.iio_channel","page":"Overview","title":"LibIIO.CLibIIO.iio_channel","text":"Represents an input or output channel of a device\n\nSee libiio\n\n\n\n\n\n","category":"type"},{"location":"cindex/#LibIIO.CLibIIO.iio_context","page":"Overview","title":"LibIIO.CLibIIO.iio_context","text":"Contains the representation of an IIO context\n\nSee libiio\n\n\n\n\n\n","category":"type"},{"location":"cindex/#LibIIO.CLibIIO.iio_context_info","page":"Overview","title":"LibIIO.CLibIIO.iio_context_info","text":"The information related to a discovered context\n\nSee libiio\n\n\n\n\n\n","category":"type"},{"location":"cindex/#LibIIO.CLibIIO.iio_data_format","page":"Overview","title":"LibIIO.CLibIIO.iio_data_format","text":"iio_data_format\n\nContains the format of a data sample.\n\nData Fields\n\nlength::Cuint : Total length of the sample in bits\nbits::Cuint : Length of the valuable data in the samples, in bits\nshift:Cuint : Right-shift to apply when converting sample\nis_signed::Cuchar : Contains true if the sample is signed\nis_fully_defined::Cuchar : Contains true if the sample is fully defoned, sign extended, etc.\nis_be::Cuchar : Contains true if the sample is in big-endian format\nwith_scale::Cuchar : Contains true if the sample should be scaled or converted\nscale::Cdouble : Contains the scale to apply if with_scale is set\nrepeat::Cuint : Numver of times length repeats\n\nSee libiio\n\n\n\n\n\n","category":"type"},{"location":"cindex/#LibIIO.CLibIIO.iio_device","page":"Overview","title":"LibIIO.CLibIIO.iio_device","text":"Represents a device in the IIO context\n\nSee libiio\n\n\n\n\n\n","category":"type"},{"location":"cindex/#LibIIO.CLibIIO.iio_modifier","page":"Overview","title":"LibIIO.CLibIIO.iio_modifier","text":"iio_modifier\n\nIIO channel type.\n\nAn IIO channel has a type specifying the type of data associated with the channel.\n\nSee libiio\n\n\n\n\n\n","category":"type"},{"location":"context/","page":"Context","title":"Context","text":"CurrentModule = LibIIO","category":"page"},{"location":"context/","page":"Context","title":"Context","text":"","category":"page"},{"location":"context/","page":"Context","title":"Context","text":"Modules = [LibIIO]\nPages = [\"context.jl\"]","category":"page"},{"location":"context/#LibIIO.Context","page":"Context","title":"LibIIO.Context","text":"Context(ptr_uri_or_nothing = nothing)\n\nInitializes a new Context using the local or the network backend of the IIO library.\n\nThis function will create a network context if the IIOD_REMOTE environment variable is set to the hostname where the IIOD server runs. If set to an empty string, the server will be discovered using ZeroConf. If the environment variable is not set, a local context will be created instead.\n\nParameters\n\nptr_uri_or_nothing : Either a Ptr{iio_context}, an URI string (recommended) or nothing                        to construct the default context (Linux only).\n\n\n\n\n\n","category":"type"},{"location":"context/#LibIIO.Context-2","page":"Context","title":"LibIIO.Context","text":"Contains the representation of an IIO context.\n\n\n\n\n\n","category":"type"},{"location":"context/#LibIIO.LocalContext","page":"Context","title":"LibIIO.LocalContext","text":"Local IIO Context.\n\n\n\n\n\n","category":"type"},{"location":"context/#LibIIO.LocalContext-Tuple{}","page":"Context","title":"LibIIO.LocalContext","text":"LocalContext([ctx::Ptr{iio_context}])\n\nInitializes a new LocalContext using the local backend if the IIO library. Can be constructed from an existing pointer to an iio_context.\n\n\n\n\n\n","category":"method"},{"location":"context/#LibIIO.NetworkContext","page":"Context","title":"LibIIO.NetworkContext","text":"XMLContext(xml_file)\n\nInitializes a new NetworkContext using the network backend if the IIO library.\n\nParameters\n\nhostname : Hostname, IPv4 or IPv6 address where the IIO Daemon is running\n\n\n\n\n\n","category":"type"},{"location":"context/#LibIIO.NetworkContext-2","page":"Context","title":"LibIIO.NetworkContext","text":"Network IIO context\n\n\n\n\n\n","category":"type"},{"location":"context/#LibIIO.XMLContext","page":"Context","title":"LibIIO.XMLContext","text":"XML IIO Context.\n\n\n\n\n\n","category":"type"},{"location":"context/#LibIIO.XMLContext-Tuple{String}","page":"Context","title":"LibIIO.XMLContext","text":"XMLContext(xml_file)\n\nInitializes a new XMLContext using the XML backend if the IIO library.\n\nParameters\n\nxmlfile : Filename of the XML file to build the context from.\n\n\n\n\n\n","category":"method"},{"location":"context/#LibIIO.attrs-Tuple{LibIIO.AbstractContext}","page":"Context","title":"LibIIO.attrs","text":"attrs(ctx::AbstractContext)\n\nLost of context-specific attributes.\n\n\n\n\n\n","category":"method"},{"location":"context/#LibIIO.clone-Tuple{T} where T<:LibIIO.AbstractContext","page":"Context","title":"LibIIO.clone","text":"clone(ctx::T) where {T <: AbstractContext}\n\nClones the IIO context.\n\n\n\n\n\n","category":"method"},{"location":"context/#LibIIO.description-Tuple{LibIIO.AbstractContext}","page":"Context","title":"LibIIO.description","text":"description(ctx::AbstractContext)\n\nDescription of this IIO context.\n\n\n\n\n\n","category":"method"},{"location":"context/#LibIIO.devices-Tuple{LibIIO.AbstractContext}","page":"Context","title":"LibIIO.devices","text":"devices(ctx::AbstractContext)\n\nList of devices contained in this context.\n\n\n\n\n\n","category":"method"},{"location":"context/#LibIIO.find_device-Tuple{LibIIO.AbstractContext, Any}","page":"Context","title":"LibIIO.find_device","text":"find_device(ctx::AbstractContext, name_or_id_or_label)\n\nFind an IIO device by its name, ID or label.\n\n\n\n\n\n","category":"method"},{"location":"context/#LibIIO.name-Tuple{LibIIO.AbstractContext}","page":"Context","title":"LibIIO.name","text":"name(ctx::AbstractContext)\n\nName of the IIO context.\n\n\n\n\n\n","category":"method"},{"location":"context/#LibIIO.scan_contexts-Tuple{}","page":"Context","title":"LibIIO.scan_contexts","text":"scan_contexts()\n\nScan Context.\n\n\n\n\n\n","category":"method"},{"location":"context/#LibIIO.set_timeout-Tuple{LibIIO.AbstractContext, Any}","page":"Context","title":"LibIIO.set_timeout","text":"set_timeout(ctx::AbstractContext, timeout)\n\nSet a timeout for I/O operations.\n\nParameters\n\nvalue : The timeout value, in milliseconds\n\n\n\n\n\n","category":"method"},{"location":"context/#LibIIO.version-Tuple{LibIIO.AbstractContext}","page":"Context","title":"LibIIO.version","text":"version(ctx::AbstractContext)\n\nVersion of the context backed, as Tuple(UInt, UInt, String)`\n\n\n\n\n\n","category":"method"},{"location":"context/#LibIIO.xml-Tuple{LibIIO.AbstractContext}","page":"Context","title":"LibIIO.xml","text":"xml(ctx::AbstractContext)\n\nXML representation of the IIO context.\n\n\n\n\n\n","category":"method"},{"location":"cdevice/","page":"Device","title":"Device","text":"CurrentModule = LibIIO.CLibIIO","category":"page"},{"location":"cdevice/#Index","page":"Device","title":"Index","text":"","category":"section"},{"location":"cdevice/","page":"Device","title":"Device","text":"Pages = [\"cdevice.md\"]","category":"page"},{"location":"cdevice/#Documentation","page":"Device","title":"Documentation","text":"","category":"section"},{"location":"cdevice/","page":"Device","title":"Device","text":"iio_device_get_context\niio_device_get_id\niio_device_get_name\niio_device_get_label\niio_device_get_channels_count\niio_device_get_attrs_count\niio_device_get_buffer_attrs_count\niio_device_get_channel\niio_device_get_attr\niio_device_get_buffer_attr\niio_device_find_channel\niio_device_find_attr\niio_device_find_buffer_attr\niio_device_attr_read\niio_device_attr_read_all\niio_device_attr_read_bool\niio_device_attr_read_longlong\niio_device_attr_read_double\niio_device_attr_write\niio_device_attr_write_raw\niio_device_attr_write_all\niio_device_attr_write_bool\niio_device_attr_write_longlong\niio_device_attr_write_double\niio_device_buffer_attr_read\niio_device_buffer_attr_read_all\niio_device_buffer_attr_read_bool\niio_device_buffer_attr_read_longlong\niio_device_buffer_attr_read_double\niio_device_buffer_attr_write\niio_device_buffer_attr_write_raw\niio_device_buffer_attr_write_all\niio_device_buffer_attr_write_bool\niio_device_buffer_attr_write_longlong\niio_device_buffer_attr_write_double\niio_device_set_data\niio_device_get_data\niio_device_get_trigger\niio_device_set_trigger\niio_device_is_trigger\niio_device_set_kernel_buffers_count","category":"page"},{"location":"cdevice/#LibIIO.CLibIIO.iio_device_get_context","page":"Device","title":"LibIIO.CLibIIO.iio_device_get_context","text":"iio_device_get_context(dev)\n\nRetrieve a pointer to the iio_context structure.\n\nParameters\n\ndev::Ptr{iio_device} : A pointer to an iio_device structure\n\nReturns\n\nA pointer to an iio_context\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cdevice/#LibIIO.CLibIIO.iio_device_get_id","page":"Device","title":"LibIIO.CLibIIO.iio_device_get_id","text":"iio_device_get_id(dev)\n\nRetrieve the device ID (e.g. iio:device0)\n\nParameters\n\ndev::Ptr{iio_device} : A pointer to an iio_device structure\n\nReturns\n\nA string containing the id\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cdevice/#LibIIO.CLibIIO.iio_device_get_name","page":"Device","title":"LibIIO.CLibIIO.iio_device_get_name","text":"iio_device_get_name(dev)\n\nRetrieve the device name (e.g. xadc)\n\nParameters\n\ndev::Ptr{iio_device} : A pointer to an iio_device structure\n\nReturns\n\nA string containing the name\n\nnote: Note\nIf the device has no name, an empty string is returned\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cdevice/#LibIIO.CLibIIO.iio_device_get_label","page":"Device","title":"LibIIO.CLibIIO.iio_device_get_label","text":"iio_device_get_label(dev)\n\nRetrieve the device label (e.g. lo_pll0_rx_adf4351)\n\nParameters\n\ndev::Ptr{iio_device} : A pointer to an iio_device structure\n\nReturns\n\nA string containing the label\n\nnote: Note\nIf the device has no label, an empty string is returned\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cdevice/#LibIIO.CLibIIO.iio_device_get_channels_count","page":"Device","title":"LibIIO.CLibIIO.iio_device_get_channels_count","text":"iio_device_get_channels_count(dev)\n\nEnumerate the channels of the given device.\n\nParameters\n\ndev::Ptr{iio_device} : A pointer to an iio_device structure\n\nReturns\n\nThe number of channels found\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cdevice/#LibIIO.CLibIIO.iio_device_get_attrs_count","page":"Device","title":"LibIIO.CLibIIO.iio_device_get_attrs_count","text":"iio_device_get_attrs_count(dev)\n\nEnumerate the device-specific attributes of the given device.\n\nParameters\n\ndev::Ptr{iio_device} : A pointer to an iio_device structure\n\nReturns\n\nThe number of device-specific attributes found\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cdevice/#LibIIO.CLibIIO.iio_device_get_buffer_attrs_count","page":"Device","title":"LibIIO.CLibIIO.iio_device_get_buffer_attrs_count","text":"iio_device_get_buffer_attrs_count(dev)\n\nEnumerate the buffer-specific attributes of the given device.\n\nParameters\n\ndev::Ptr{iio_device} : A pointer to an iio_device structure\n\nReturns\n\nThe number of buffer-specific attributes found\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cdevice/#LibIIO.CLibIIO.iio_device_get_channel","page":"Device","title":"LibIIO.CLibIIO.iio_device_get_channel","text":"iio_device_get_channel(dev, index)\n\nGet the channel present at the given index.\n\nParameters\n\ndev::Ptr{iio_device} : A pointer to an iio_device structure\nindex::Cuint : The index corresponding to the channel\n\nReturns\n\nOn success, a pointer to an iio_channel\nIf the index is invalid, an error is raised\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cdevice/#LibIIO.CLibIIO.iio_device_get_attr","page":"Device","title":"LibIIO.CLibIIO.iio_device_get_attr","text":"iio_device_get_attr(dev, index)\n\nGet the device-specific attribute present at the given index.\n\nParameters\n\ndev::Ptr{iio_device} : A pointer to an iio_device structure\nindex::Cuint : The index corresponding to the attribute\n\nReturns\n\nOn success, a string containing the attribute name\nIf the index is invalid, an empty string will be returned\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cdevice/#LibIIO.CLibIIO.iio_device_get_buffer_attr","page":"Device","title":"LibIIO.CLibIIO.iio_device_get_buffer_attr","text":"iio_device_get_buffer_attr(dev, index)\n\nGet the buffer-specific attribute present at the given index.\n\nParameters\n\ndev::Ptr{iio_device} : A pointer to an iio_device structure\nindex::Cuint : The index corresponding to the attribute\n\nReturns\n\nOn success, a string containing the attribute name\nIf the index is invalid, an empty string will be returned\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cdevice/#LibIIO.CLibIIO.iio_device_find_channel","page":"Device","title":"LibIIO.CLibIIO.iio_device_find_channel","text":"iio_device_find_channel(dev, name, output)\n\nTry to find a channel structure by its name or ID.\n\nParameters\n\ndev::Ptr{iio_device} : A pointer to an iio_device structure\nname::String : A string corresponding to the name or ID of the channel to search for\noutput::Bool : True if the searched channel is output, false otherwise\n\nReturns\n\nOn success, a pointer to an iio_channel structure\nIf the name or ID does not correspond to any known channel of the given device, an error is raised\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cdevice/#LibIIO.CLibIIO.iio_device_find_attr","page":"Device","title":"LibIIO.CLibIIO.iio_device_find_attr","text":"iio_device_find_attr(dev, name)\n\nTry to find a device-specific attribute by its name.\n\nParameters\n\ndev::Ptr{iio_device} : A pointer to an iio_device structure\nname::String : A string corresponding to the name of the attribute\n\nReturns\n\nOn succes, a string containing the attribute name\nIf the name does not correspond to any know aatribute of the device, an empty string is returned\n\nnote: Note\nThis function is useful to detect the presence of an attribute.\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cdevice/#LibIIO.CLibIIO.iio_device_find_buffer_attr","page":"Device","title":"LibIIO.CLibIIO.iio_device_find_buffer_attr","text":"iio_device_find_buffer_attr(dev, name)\n\nTry to find a buffer-specific attribute by its name.\n\nParameters\n\ndev::Ptr{iio_device} : A pointer to an iio_device structure\nname::String : A string corresponding to the name of the attribute\n\nReturns\n\nOn succes, a string containing the attribute name\nIf the name does not correspond to any know aatribute of the device, an empty string is returned\n\nnote: Note\nThis function is useful to detect the presence of an attribute.\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cdevice/#LibIIO.CLibIIO.iio_device_attr_read","page":"Device","title":"LibIIO.CLibIIO.iio_device_attr_read","text":"iio_device_attr_read(dev, attr)\n\nRead the content of the given device-specific attribute.\n\nParameters\n\ndev::Ptr{iio_device} : A pointer to an iio_device structure\nattr::String : A string corresponding to the name of the attribute\n\nReturns\n\nOn success, a Vector of Tuples of attribute index and value if attr is an empty string, otherwise a string with the attribute value.\nOn error, a negative errno code is returned\n\nnote: Note\nBy an empty string as the \"attr\" argument to iio_device_attr_read, it is now possible to read all of the attributes of a device.\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cdevice/#LibIIO.CLibIIO.iio_device_attr_read_all","page":"Device","title":"LibIIO.CLibIIO.iio_device_attr_read_all","text":"iio_device_attr_read_all(dev, cb, data)\n\nRead the content of all device-specific attributes.\n\nParameters\n\ndev::Ptr{iio_device} : A pointer to an iio_device structure\ncb::Ptr{Cvoid} : A pointer to a callback function\ndata::Ptr{Cvoid} : A pointer that will be passed to the callback function\n\nReturns\n\nOn success, 0 is returned\nOn error, a negative errno code is returned\n\nnote: Note\nThis function is especially useful when used with the network backend, as all the device-specific attributes are read in one single command.\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cdevice/#LibIIO.CLibIIO.iio_device_attr_read_bool","page":"Device","title":"LibIIO.CLibIIO.iio_device_attr_read_bool","text":"iio_device_attr_read_bool(dev, attr)\n\nRead the content of the given device-specific attribute.\n\nParameters\n\ndev::Ptr{iio_device} : A pointer to an iio_device structure\nattr::String : A string corresponding to the name of the attribute\n\nReturns\n\nOn success, 0 and the bool value is returned\nOn error, a negative errno code is returned\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cdevice/#LibIIO.CLibIIO.iio_device_attr_read_longlong","page":"Device","title":"LibIIO.CLibIIO.iio_device_attr_read_longlong","text":"iio_device_attr_read_longlong(dev, attr)\n\nRead the content of the given device-specific attribute.\n\nParameters\n\ndev::Ptr{iio_device} : A pointer to an iio_device structure\nattr::String : A string corresponding to the name of the attribute\n\nReturns\n\nOn success, 0 and the Clonglong value is returned\nOn error, a negative errno code is returned\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cdevice/#LibIIO.CLibIIO.iio_device_attr_read_double","page":"Device","title":"LibIIO.CLibIIO.iio_device_attr_read_double","text":"iio_device_attr_read_double(dev, attr)\n\nRead the content of the given device-specific attribute.\n\nParameters\n\ndev::Ptr{iio_device} : A pointer to an iio_device structure\nattr::String : A string corresponding to the name of the attribute\n\nReturns\n\nOn success, 0 and the Cdouble value is returned\nOn error, a negative errno code is returned\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cdevice/#LibIIO.CLibIIO.iio_device_attr_write","page":"Device","title":"LibIIO.CLibIIO.iio_device_attr_write","text":"iio_device_attr_write(dev, attr, src)\n\nSet the value of the given device-specific attribute.\n\nParameters\n\ndev::Ptr{iio_device} : A pointer to an iio_device structure\nattr::String : A string corresponding to the name of the attribute\nsrc::String A string to set the attribute to\n\nReturns\n\nOn success, the number of bytes written\nOn error, a negative errno code is returned\n\nnote: Note\nBy passing C_NULL as the \"attr\" argument to iio_device_attr_write, it is now possible to write all of the attributes of a device.The buffer must contain one block of data per attribute of the device, by the order they appear in the iio_device structure.The first four bytes of one block correspond to a 32-bit signed value in network order. If negative, the attribute is not written; if positive, it corresponds to the length of the data to write. In that case, the rest of the block must contain the data.\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cdevice/#LibIIO.CLibIIO.iio_device_attr_write_raw","page":"Device","title":"LibIIO.CLibIIO.iio_device_attr_write_raw","text":"iio_device_attr_write_raw(dev, attr, src, len)\n\nSet the value of the given device-specific attribute.\n\nParameters\n\ndev::Ptr{iio_device} : A pointer to an iio_device structure\nattr::String : A string corresponding to the name of the attribute\nsrc::Ptr{Cvoid} : A pointer to the data to be written\nlen::Csize_t : The number of bytes that should be written\n\nReturns\n\nOn success, the number of bytes written\nOn error, a negative errno code is returned\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cdevice/#LibIIO.CLibIIO.iio_device_attr_write_all","page":"Device","title":"LibIIO.CLibIIO.iio_device_attr_write_all","text":"iio_device_attr_write_all(dev, cb, data)\n\nSet the values of all device-specifc attributes.\n\nParameters\n\ndev::Ptr{iio_device} : A pointer to an iio_device structure\ncb::Ptr{Cvoid} : A pointer to a callback function\ndata::Ptr{Cvoid} : A pointer that will be passed to the callback function\n\nReturns\n\nOn success, 0 is returned\nOn error, a negative errno code is returned\n\nnote: Note\nThis function is especially useful when used with the network backend, as all the device-specific attributes are written in one single command.\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cdevice/#LibIIO.CLibIIO.iio_device_attr_write_bool","page":"Device","title":"LibIIO.CLibIIO.iio_device_attr_write_bool","text":"iio_device_attr_write_bool(dev, attr, val)\n\nSet the value of the given device-specific attribute.\n\nParameters\n\ndev::Ptr{iio_device} : A pointer to an iio_device structure\nattr::String : A string corresponding to the name of the attribute\nval::Bool : A bool value to set the attribute to\n\nReturns\n\nOn success, 0 is returned\nOn error, a negative errno code is returned\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cdevice/#LibIIO.CLibIIO.iio_device_attr_write_longlong","page":"Device","title":"LibIIO.CLibIIO.iio_device_attr_write_longlong","text":"iio_device_attr_write_longlong(dev, attr, val)\n\nSet the value of the given device-specific attribute.\n\nParameters\n\ndev::Ptr{iio_device} : A pointer to an iio_device structure\nattr::String : A string corresponding to the name of the attribute\nval::Clonglong : A Clonglong value to set the attribute to\n\nReturns\n\nOn success, 0 is returned\nOn error, a negative errno code is returned\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cdevice/#LibIIO.CLibIIO.iio_device_attr_write_double","page":"Device","title":"LibIIO.CLibIIO.iio_device_attr_write_double","text":"iio_device_attr_write_double(dev, attr, val)\n\nSet the value of the given device-specific attribute.\n\nParameters\n\ndev::Ptr{iio_device} : A pointer to an iio_device structure\nattr::String : A string corresponding to the name of the attribute\nval::Cdouble : A Cdouble value to set the attribute to\n\nReturns\n\nOn success, 0 is returned\nOn error, a negative errno code is returned\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cdevice/#LibIIO.CLibIIO.iio_device_buffer_attr_read","page":"Device","title":"LibIIO.CLibIIO.iio_device_buffer_attr_read","text":"iio_device_buffer_attr_read(dev, attr)\n\nRead the content of the given buffer-specific attribute.\n\nParameters\n\ndev::Ptr{iio_device} : A pointer to an iio_device structure\nattr::String : A string corresponding to the name of the attribute\n\nReturns\n\nOn success, a Vector of Tuples of attribute index and value if attr is an empty string, otherwise a string with the attribute value.\nOn error, a negative errno code is returned\n\nnote: Note\nBy an empty string as the \"attr\" argument to iio_device_buffer_attr_read, it is now possible to read all of the buffer attributes of a device.\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cdevice/#LibIIO.CLibIIO.iio_device_buffer_attr_read_all","page":"Device","title":"LibIIO.CLibIIO.iio_device_buffer_attr_read_all","text":"iio_device_buffer_attr_read_all(dev, cb::Ptr{Cvoid}, data)\n\nRead the content of all buffer-specific attributes.\n\nParameters\n\ndev::Ptr{iio_device} : A pointer to an iio_device structure\ncb::Ptr{Cvoid} : A pointer to a callback function\ndata::Ptr{Cvoid} : A pointer that will be passed to the callback function\n\nReturns\n\nOn success, 0 is returned\nOn error, a negative errno code is returned\n\nnote: Note\nThis function is especially useful when used with the network backend, as all the buffer-specific attributes are read in one single command.\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cdevice/#LibIIO.CLibIIO.iio_device_buffer_attr_read_bool","page":"Device","title":"LibIIO.CLibIIO.iio_device_buffer_attr_read_bool","text":"iio_device_buffer_attr_read_bool(dev, attr)\n\nRead the content of the given buffer-specific attribute.\n\nParameters\n\ndev::Ptr{iio_device} : A pointer to an iio_device structure\nattr::String : A string corresponding to the name of the attribute\n\nReturns\n\nOn success, 0 and the bool value is returned\nOn error, a negative errno code is returned\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cdevice/#LibIIO.CLibIIO.iio_device_buffer_attr_read_longlong","page":"Device","title":"LibIIO.CLibIIO.iio_device_buffer_attr_read_longlong","text":"iio_device_buffer_attr_read_longlong(dev, attr)\n\nRead the content of the given buffer-specific attribute.\n\nParameters\n\ndev::Ptr{iio_device} : A pointer to an iio_device structure\nattr::String : A string corresponding to the name of the attribute\n\nReturns\n\nOn success, 0 and the Clonglong value is returned\nOn error, a negative errno code is returned\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cdevice/#LibIIO.CLibIIO.iio_device_buffer_attr_read_double","page":"Device","title":"LibIIO.CLibIIO.iio_device_buffer_attr_read_double","text":"iio_device_buffer_attr_read_double(dev, attr)\n\nRead the content of the given buffer-specific attribute.\n\nParameters\n\ndev::Ptr{iio_device} : A pointer to an iio_device structure\nattr::String : A string corresponding to the name of the attribute\n\nReturns\n\nOn success, 0 and the Cdouble value is returned\nOn error, a negative errno code is returned\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cdevice/#LibIIO.CLibIIO.iio_device_buffer_attr_write","page":"Device","title":"LibIIO.CLibIIO.iio_device_buffer_attr_write","text":"iio_device_buffer_attr_write(dev, attr, src)\n\nSet the value of the given buffer-specific attribute.\n\nParameters\n\ndev::Ptr{iio_device} : A pointer to an iio_device structure\nattr::String : A string corresponding to the name of the attribute\nsrc::String A string to set the attribute to\n\nReturns\n\nOn success, the number of bytes written\nOn error, a negative errno code is returned\n\nnote: Note\nBy passing C_NULL as the \"attr\" argument to iio_device_buffer_attr_write, it is now possible to write all of the attributes of a device.The buffer must contain one block of data per attribute of the device, by the order they appear in the iio_device structure.The first four bytes of one block correspond to a 32-bit signed value in network order. If negative, the attribute is not written; if positive, it corresponds to the length of the data to write. In that case, the rest of the block must contain the data.\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cdevice/#LibIIO.CLibIIO.iio_device_buffer_attr_write_raw","page":"Device","title":"LibIIO.CLibIIO.iio_device_buffer_attr_write_raw","text":"iio_device_buffer_attr_write_raw(dev, attr, src, len)\n\nSet the value of the given buffer-specific attribute.\n\nParameters\n\ndev::Ptr{iio_device} : A pointer to an iio_device structure\nattr::String : A string corresponding to the name of the attribute\nsrc::Ptr{Cvoid} : A pointer to the data to be written\nlen::Csize_t : The number of bytes that should be written\n\nReturns\n\nOn success, the number of bytes written\nOn error, a negative errno code is returned\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cdevice/#LibIIO.CLibIIO.iio_device_buffer_attr_write_all","page":"Device","title":"LibIIO.CLibIIO.iio_device_buffer_attr_write_all","text":"iio_device_buffer_attr_write_all(dev, cb, data)\n\nSet the values of all buffer-specifc attributes.\n\nParameters\n\ndev::Ptr{iio_device} : A pointer to an iio_device structure\ncb::Ptr{Cvoid} : A pointer to a callback function\ndata::Ptr{Cvoid} : A pointer that will be passed to the callback function\n\nReturns\n\nOn success, 0 is returned\nOn error, a negative errno code is returned\n\nnote: Note\nThis function is especially useful when used with the network backend, as all the buffer-specific attributes are written in one single command.\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cdevice/#LibIIO.CLibIIO.iio_device_buffer_attr_write_bool","page":"Device","title":"LibIIO.CLibIIO.iio_device_buffer_attr_write_bool","text":"iio_device_buffer_attr_write_bool(dev, attr, val)\n\nSet the value of the given buffer-specific attribute.\n\nParameters\n\ndev::Ptr{iio_device} : A pointer to an iio_device structure\nattr::String : A string corresponding to the name of the attribute\nval::Bool : A bool value to set the attribute to\n\nReturns\n\nOn success, 0 is returned\nOn error, a negative errno code is returned\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cdevice/#LibIIO.CLibIIO.iio_device_buffer_attr_write_longlong","page":"Device","title":"LibIIO.CLibIIO.iio_device_buffer_attr_write_longlong","text":"iio_device_buffer_attr_write_longlong(dev, attr, val)\n\nSet the value of the given buffer-specific attribute.\n\nParameters\n\ndev::Ptr{iio_device} : A pointer to an iio_device structure\nattr::String : A string corresponding to the name of the attribute\nval::Clonglong : A Clonglong value to set the attribute to\n\nReturns\n\nOn success, 0 is returned\nOn error, a negative errno code is returned\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cdevice/#LibIIO.CLibIIO.iio_device_buffer_attr_write_double","page":"Device","title":"LibIIO.CLibIIO.iio_device_buffer_attr_write_double","text":"iio_device_buffer_attr_write_double(dev, attr, val)\n\nSet the value of the given buffer-specific attribute.\n\nParameters\n\ndev::Ptr{iio_device} : A pointer to an iio_device structure\nattr::String : A string corresponding to the name of the attribute\nval::Cdouble : A Cdouble value to set the attribute to\n\nReturns\n\nOn success, 0 is returned\nOn error, a negative errno code is returned\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cdevice/#LibIIO.CLibIIO.iio_device_set_data","page":"Device","title":"LibIIO.CLibIIO.iio_device_set_data","text":"iio_device_set_data(dev, data)\n\nAssociate a pointer to an iio_device structure.\n\nParameters\n\ndev::Ptr{iio_device} : A pointer to an iio_device structure\ndata::Ptr{Cvoid} : The pointer to be associated\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cdevice/#LibIIO.CLibIIO.iio_device_get_data","page":"Device","title":"LibIIO.CLibIIO.iio_device_get_data","text":"iio_device_get_data(dev)\n\nRetrieve a previously associated pointer of an iio_device structure.\n\nParameters\n\ndev::Ptr{iio_device} : A pointer to an iio_device structure\n\nReturns\n\nThe pointer previously associated if present, or C_NULL\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cdevice/#LibIIO.CLibIIO.iio_device_get_trigger","page":"Device","title":"LibIIO.CLibIIO.iio_device_get_trigger","text":"iio_device_get_trigger(dev)\n\nRetrieve the trigger of a given device.\n\nParameters\n\ndev::Ptr{iio_device} : A pointer to an iio_device structure\ntrigger::Ptr{iio_device} : A pointer to an [iio_device][@ref] structure. The pointer                              will be set to the address of the iio_device                              structure corresponding to the associated trigger device.\n\nReturns\n\nOn success, 0 is returned\nOn error, a negative errno code is returned\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cdevice/#LibIIO.CLibIIO.iio_device_set_trigger","page":"Device","title":"LibIIO.CLibIIO.iio_device_set_trigger","text":"iio_device_set_trigger(dev, trigger)\n\nAssociate a trigger to a given device.\n\nParameters\n\ndev::Ptr{iio_device} : A pointer to an iio_device structure\ntrigger::Ptr{iio_device : A pointer to an iio_device structure corresponding                             to the trigger that should be associated.\n\nReturns\n\nOn success, 0 is returned\nOn error, a negative errno code is returned\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cdevice/#LibIIO.CLibIIO.iio_device_is_trigger","page":"Device","title":"LibIIO.CLibIIO.iio_device_is_trigger","text":"iio_device_is_trigger(dev)\n\nReturns true of the given device is a trigger.\n\nParameters\n\ndev::Ptr{iio_device} : A pointer to an iio_device structure\n\nReturns\n\nTrue if the deivce is a trigger, false otherwise\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"cdevice/#LibIIO.CLibIIO.iio_device_set_kernel_buffers_count","page":"Device","title":"LibIIO.CLibIIO.iio_device_set_kernel_buffers_count","text":"iio_device_set_kernel_buffers_count(dev, nb_buffers)\n\nConfigure the number of kernel buffers for a device.\n\nThis function allows to change the number of buffers on kernel side.\n\nParameters\n\ndev::Ptr{iio_device} : A pointer to an iio_device structure\nnb_buffers::Cuint : The number of buffers\n\nReturns\n\nOn success, 0 is returned\nOn error, a negative errno code is returned\n\nSee libiio\n\n\n\n\n\n","category":"function"},{"location":"ccontext/","page":"Context","title":"Context","text":"CurrentModule = LibIIO","category":"page"},{"location":"ccontext/","page":"Context","title":"Context","text":"Pages = [\"ccontext.md\"]","category":"page"},{"location":"ccontext/","page":"Context","title":"Context","text":"Modules = [LibIIO.CLibIIO]\nPages = [\"context.jl\"]","category":"page"},{"location":"ccontext/#LibIIO.CLibIIO.iio_context_clone-Tuple{Ptr{iio_context}}","page":"Context","title":"LibIIO.CLibIIO.iio_context_clone","text":"iio_context_clone(ctx)\n\nDuplicate a pre-existing IIO context.\n\nParameters\n\nctx::Ptr{iio_context} : A pointer to an iio_context structure\n\nReturns\n\nOn success, a pointer to an iio_context structure\nOn failure, an error is raised\n\nnote: Note\nThis function is not supported on 'usb:' contexts, since libusb can only claim the interface once. \"Function not implemented\" is the expected errno. Any context which is cloned, must be destroyed via calling iio_context_destroy()\n\nSee libiio\n\n\n\n\n\n","category":"method"},{"location":"ccontext/#LibIIO.CLibIIO.iio_context_destroy-Tuple{Ptr{iio_context}}","page":"Context","title":"LibIIO.CLibIIO.iio_context_destroy","text":"iio_context_destroy(ctx)\n\nDestroy the given context.\n\nParameters\n\nctx::Ptr{iio_context} : A pointer to an iio_context structure\n\nnote: Note\nAfter that function, the iio_context pointer shall be invalid.\n\nSee libiio\n\n\n\n\n\n","category":"method"},{"location":"ccontext/#LibIIO.CLibIIO.iio_context_find_device-Tuple{Ptr{iio_context}, String}","page":"Context","title":"LibIIO.CLibIIO.iio_context_find_device","text":"iio_context_find_device(ctx, name)\n\nTry to find a device structure by its ID, label or name.\n\nParameters\n\nctx::Ptr{iio_context} : A pointer to an iio_context structure\nname::String : A string corresponding to the ID, label or name of the device to search for\n\nReturns\n\nOn success, a pointer to an iio_device structure\nIf the parameter does not correspond to the ID, label or name of any known device, an error is raised\n\nSee libiio\n\n\n\n\n\n","category":"method"},{"location":"ccontext/#LibIIO.CLibIIO.iio_context_get_attr-Tuple{Ptr{iio_context}, UInt32}","page":"Context","title":"LibIIO.CLibIIO.iio_context_get_attr","text":"iio_context_get_attr(ctx, index)\n\nRetrieve the name and value of a context-specific attribute.\n\nParameters\n\nctx::Ptr{iio_context} : A pointer to an iio_context structure\nindex::Cuint : The index corresponding to the attribute\n\nReturns\n\nOn success, a 3-Tuple of (0, name, value) is returned\nOn error, a negative errno code is returned\n\nIntroduced in version 0.9\n\nSee libiio\n\n\n\n\n\n","category":"method"},{"location":"ccontext/#LibIIO.CLibIIO.iio_context_get_attr_value-Tuple{Ptr{iio_context}, String}","page":"Context","title":"LibIIO.CLibIIO.iio_context_get_attr_value","text":"iio_context_get_attr_value(ctx, name)\n\nRetrieve the value of a context-specific attribute.\n\nParameters\n\nctx::Ptr{iio_context} : A pointer to an iio_context structure\nname::String : The name of the context attribute to read\n\nReturns\n\nOn success, a String with the value of the attribute\nIf the name does not correspond to any attribute, C_NULL is returned\n\nIntroduced in version 0.9\n\nSee libiio\n\n\n\n\n\n","category":"method"},{"location":"ccontext/#LibIIO.CLibIIO.iio_context_get_attrs_count-Tuple{Ptr{iio_context}}","page":"Context","title":"LibIIO.CLibIIO.iio_context_get_attrs_count","text":"iio_context_get_attrs_count(ctx)\n\nGet the number of context-specific attributes.\n\nParameters\n\nctx::Ptr{iio_context} : A pointer to an iio_context structure\n\nReturns\n\nThe number of context-specific attributes\n\nIntroduced in version 0.9\n\nSee libiio\n\n\n\n\n\n","category":"method"},{"location":"ccontext/#LibIIO.CLibIIO.iio_context_get_description-Tuple{Ptr{iio_context}}","page":"Context","title":"LibIIO.CLibIIO.iio_context_get_description","text":"iio_context_get_description(ctx)\n\nGet a description of the given context.\n\nParameters\n\nctx::Ptr{iio_context} : A pointer to an iio_context structure\n\nReturns\n\nA String containing the description\n\nnote: Note\nThe returned string will contain human-readable information about the current context.\n\nSee libiio\n\n\n\n\n\n","category":"method"},{"location":"ccontext/#LibIIO.CLibIIO.iio_context_get_device-Tuple{Ptr{iio_context}, UInt32}","page":"Context","title":"LibIIO.CLibIIO.iio_context_get_device","text":"iio_context_get_device(ctx, index)\n\nGet the device present at the given index.\n\nParameters\n\nctx::Ptr{iio_context} : A pointer to an iio_context structure\nindex::Cuint : The index corresponding to the device\n\nReturns\n\nOn success, a pointer to an iio_device structure\nIf the index is invalid, an error is raised\n\nSee libiio\n\n\n\n\n\n","category":"method"},{"location":"ccontext/#LibIIO.CLibIIO.iio_context_get_devices_count-Tuple{Ptr{iio_context}}","page":"Context","title":"LibIIO.CLibIIO.iio_context_get_devices_count","text":"iio_context_get_devices_count(ctx)\n\nEnumerate the devices found in the given context.\n\nParameters\n\nctx::Ptr{iio_context} : A pointer to an iio_context structure\n\nReturns\n\nThe number of devices found\n\nSee libiio\n\n\n\n\n\n","category":"method"},{"location":"ccontext/#LibIIO.CLibIIO.iio_context_get_name-Tuple{Ptr{iio_context}}","page":"Context","title":"LibIIO.CLibIIO.iio_context_get_name","text":"iio_context_get_name(ctx)\n\nGet the name of the given context.\n\nParameters\n\nctx::Ptr{iio_context} : A pointer to an iio_context structure\n\nReturns\n\nA String containing the name\n\nnote: Note\nThe returned string will be local, xml or network when the context has been created with the local, xml and network backends respectively.\n\nSee libiio\n\n\n\n\n\n","category":"method"},{"location":"ccontext/#LibIIO.CLibIIO.iio_context_get_version-Tuple{Ptr{iio_context}}","page":"Context","title":"LibIIO.CLibIIO.iio_context_get_version","text":"iio_context_get_version(ctx)\n\nGet the version of the backend in use.\n\nParameters\n\nctx::Ptr{iio_context} : A pointer to an iio_context structure\n\nReturns\n\nOn success, A 4-Tuple of (0, major, minor, git_tag) is returned\nOn error, a negative errno code is returned\n\nSee libiio\n\n\n\n\n\n","category":"method"},{"location":"ccontext/#LibIIO.CLibIIO.iio_context_get_xml-Tuple{Ptr{iio_context}}","page":"Context","title":"LibIIO.CLibIIO.iio_context_get_xml","text":"iio_context_get_xml(ctx)\n\nObtain a XML representation of the given context.\n\nParameters\n\nctx::Ptr{iio_context} : A pointer to an iio_context structure\n\nReturns\n\nA String containing the XML content.\n\nSee libiio\n\n\n\n\n\n","category":"method"},{"location":"ccontext/#LibIIO.CLibIIO.iio_context_set_timeout-Tuple{Ptr{iio_context}, UInt32}","page":"Context","title":"LibIIO.CLibIIO.iio_context_set_timeout","text":"iio_context_set_timeout(ctx, timeout_ms)\n\nSet a timeout for I/O operations.\n\nParameters\n\nctx::Ptr{iio_context} : A pointer to an iio_context structure\ntimeout_ms::Cuint : A positive integer representing the time in milliseconds after which a timeout occurs. A value of 0 is used to specify that no timeout should occur.\n\nReturns\n\nOn success, 0 is returned\nOn error, a negative errno code is returned\n\nSee libiio\n\n\n\n\n\n","category":"method"},{"location":"ccontext/#LibIIO.CLibIIO.iio_create_context_from_uri-Tuple{String}","page":"Context","title":"LibIIO.CLibIIO.iio_create_context_from_uri","text":"iio_create_context_from_uri(uri)\n\nCreate a context from an URI description.\n\nParameters\n\nuri::String : An URI describing the context location\n\nReturns\n\nOn success, a pointer to an iio_context structure\nOn failure, an error is raised\n\nnote: Note\nThe following URIs are supported based on compile time backend support:Local backend, \"local:\" Does not have an address part. For example \"local:\"\nXML backend, \"xml:\" Requires a path to the XML file for the address part. For example \"xml:/home/user/file.xml\"\nNetwork backend, \"ip:\" Requires a hostname, IPv4, or IPv6 to connect to a specific running IIO Daemon or no address part for automatic discovery when library is compiled with ZeroConf support. For example \"ip:192.168.2.1\", or \"ip:localhost\", or \"ip:\" or \"ip:plutosdr.local\". To support alternative port numbers the standard ip:host:port format is used. A special format is required as defined in RFC2732 for IPv6 literal hostnames, (adding '[]' around the host) to use a ip:[x:x:x:x:x:x:x:x]:port format. Valid examples would be:\nip: Any host on default port\nip::40000 Any host on port 40000\nip:analog.local Default port\nip:brain.local:40000 Port 40000\nip:192.168.1.119 Default Port\nip:192.168.1.119:40000 Port 40000\nip:2601:190:400:da:47b3:55ab:3914:bff1 Default Port\nip:[2601:190:400:da:9a90:96ff:feb5:acaa]:40000 Port 40000\nUSB backend, \"usb:\" When more than one usb device is attached, requires bus, address, and interface parts separated with a dot. For example \"usb:3.32.5\". Where there is only one USB device attached, the shorthand \"usb:\" can be used.\nSerial backend, \"serial:\" Requires:\na port (/dev/ttyUSB0),\nbaud_rate (default 115200)\nserial port configuration\ndata bits (5 6 7 8 9)\nparity ('n' none, 'o' odd, 'e' even, 'm' mark, 's' space)\nstop bits (1 2)\nflow control ('\u0000' none, 'x' Xon Xoff, 'r' RTSCTS, 'd' DTRDSR)\nFor example \"serial:/dev/ttyUSB0,115200\" or \"serial:/dev/ttyUSB0,115200,8n1\"\n\nSee libiio\n\n\n\n\n\n","category":"method"},{"location":"ccontext/#LibIIO.CLibIIO.iio_create_default_context-Tuple{}","page":"Context","title":"LibIIO.CLibIIO.iio_create_default_context","text":"iio_create_default_context()\n\nCreate a context from local or remote IIO devices.\n\nReturns\n\nOn success, a pointer to an iio_context structure\nOn failure, an error is raised\n\nnote: Note\nThis function will create a context with the URI provided in the IIOD_REMOTE environment variable. If not set, a local context will be created instead.\n\nSee libiio\n\n\n\n\n\n","category":"method"},{"location":"ccontext/#LibIIO.CLibIIO.iio_create_local_context-Tuple{}","page":"Context","title":"LibIIO.CLibIIO.iio_create_local_context","text":"iio_create_local_context()\n\nCreate a context from local IIO devices (Linux only)\n\nReturns\n\nOn success, a pointer to an iio_context structure\nOn failure, an error is raised\n\nSee libiio\n\n\n\n\n\n","category":"method"},{"location":"ccontext/#LibIIO.CLibIIO.iio_create_network_context-Tuple{String}","page":"Context","title":"LibIIO.CLibIIO.iio_create_network_context","text":"iio_create_network_context(host)\n\nCreate a context from the network.\n\nParameters\n\nhost::String : Hostname, IPv4 or IPv6 address where the IIO Daemon is running\n\nReturns\n\nOn success, a pointer to an iio_context structure\nOn failure, an error is raised\n\nSee libiio\n\n\n\n\n\n","category":"method"},{"location":"ccontext/#LibIIO.CLibIIO.iio_create_xml_context-Tuple{String}","page":"Context","title":"LibIIO.CLibIIO.iio_create_xml_context","text":"iio_create_xml_context(xml_file)\n\nCreate a context from a XML file.\n\nParameters\n\nxml_file::String : Path to the XML file to open\n\nReturns\n\nOn success, a pointer to an iio_context structure\nOn failure, an error is raised\n\nnote: Note\nThe format of the XML must comply to the one returned by iiocontextget_xml.\n\nSee libiio\n\n\n\n\n\n","category":"method"},{"location":"ccontext/#LibIIO.CLibIIO.iio_create_xml_context_mem-Tuple{String, UInt64}","page":"Context","title":"LibIIO.CLibIIO.iio_create_xml_context_mem","text":"iio_create_xml_context_mem(xml, len)\n\nCreate a context from a XML data in memory.\n\nParameters\n\nxml::String : String with the XML data in memory\nlen::Csize_t : Length of the XML string in memory\n\nReturns\n\nOn success, a pointer to an iio_context\nOn failure, an error is raised\n\nnote: Note\nThe format of the XML must comply to the one returned by iiocontextget_xml.\n\nSee libiio\n\n\n\n\n\n","category":"method"},{"location":"ctoplevel/","page":"Top-level functions","title":"Top-level functions","text":"","category":"page"},{"location":"ctoplevel/","page":"Top-level functions","title":"Top-level functions","text":"Modules = [LibIIO.CLibIIO]\nPages = [\"toplevel.jl\"]","category":"page"},{"location":"ctoplevel/#LibIIO.CLibIIO.iio_get_backend-Tuple{UInt32}","page":"Top-level functions","title":"LibIIO.CLibIIO.iio_get_backend","text":"iio_get_backend(index)\n\nRetrieve the name of a given backend.\n\nParameters\n\nindex : The index corresponding to the attribute\n\nReturns:\n\nOn success, a string containing the backend\nIf the index is invalid, an empty string is returned\n\nSee: libiio\n\n\n\n\n\n","category":"method"},{"location":"ctoplevel/#LibIIO.CLibIIO.iio_get_backends_count-Tuple{}","page":"Top-level functions","title":"LibIIO.CLibIIO.iio_get_backends_count","text":"iio_get_backends_count_count()\n\nGet the number of available backends.\n\nReturns\n\nThe number of available backends\n\nSee: libiio\n\n\n\n\n\n","category":"method"},{"location":"ctoplevel/#LibIIO.CLibIIO.iio_has_backend-Tuple{String}","page":"Top-level functions","title":"LibIIO.CLibIIO.iio_has_backend","text":"iio_has_backend(backend)\n\nCheck if the specified backend is available.\n\nParameters\n\nbackend::String : The name of the backend to query\n\nReturns\n\nTrue if the backend is available, false otherwise\n\nSee: libiio\n\n\n\n\n\n","category":"method"},{"location":"ctoplevel/#LibIIO.CLibIIO.iio_library_get_version-Tuple{}","page":"Top-level functions","title":"LibIIO.CLibIIO.iio_library_get_version","text":"iio_library_get_version()\n\nGet the version of the libiio library.\n\nReturns\n\nmajor::UInt : The major version\nminor::UInt : The minor version\ngit_tag::String : The version's git tag\n\nSee: libiio\n\n\n\n\n\n","category":"method"},{"location":"ctoplevel/#LibIIO.CLibIIO.iio_strerror-Tuple{Int32}","page":"Top-level functions","title":"LibIIO.CLibIIO.iio_strerror","text":"iio_strerror(err)\n\nGet a string description of an error code.\n\nParameters\n\nerr::Int : The error code\n\nReturns\n\ndst::String : The string description of the error\n\nSee: libiio\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = LibIIO","category":"page"},{"location":"#LibIIO","page":"Home","title":"LibIIO","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for LibIIO.","category":"page"}]
}
